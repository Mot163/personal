{"code":0,"message":"获取文章简要信息成功!","data":{"id":"22","title":"Redis中间件部署及使用","description":"Redis中间件部署及使用","cover":"","content":"### 1. Redis的部署\n\n#### 1.1 CentOS7.x下的直接部署\n\n- 下载源码包\n\n```bash\nwget http://download.redis.io/releases/redis-4.0.10.tar.gz\n```\n\n- 解压\n\n```bash\ntar -zxvf redis-4.0.10.tar.gz\n```\n\n- 安装gcc环境\n\n```bash\nyum install -y gcc\n```\n\n- 进入解压文件夹编译\n\n```bash\ncd redis-4.0.10\nmake MALLOC=libc\n```\n\n- 安装redis服务到指定文件夹\n\n```bash\nmake install PREFIX=/usr/local/redis\n```\n\n- 启动redis服务\n\n```bash\n# 进入redis的bin目录\ncd /usr/local/redis/bin\n\n# 直接启动redis服务，使用redis的默认配置\n./redis-server\n\n# 通过redis的配置文件进行启动（配置文件在为解压文件夹中的redis.conf）\n./redis-server ./redis.conf\n```\n\n- 启动命令行客户端\n\n```bash\n# 进入redis的bin目录\ncd /usr/local/redis/bin\n\n# 启动命令行客户端\n./redis-cli\n```\n\n---\n\n#### 1.2 CentOS7.x下通过Docker的安装部署\n\n- 安装部署命令\n\n```bash\ndocker run -p 6379:6379 -v /usr/local/redis/conf/redis.conf:/etc/redis/redis.conf -v /usr/local/redis/data:/data --name redis-4.0.10 -d redis:4.0.10 redis-server /etc/redis/redis.conf\n```\n\n- 命令说明\n\n```bash\n# 将容器的6379端口映射到主机的6379端口\n-p 6379:6379\n\n# 将主机/usr/local/redis/conf目录下redis.conf挂在到容器/etc/redis/redis.conf\n-v /usr/local/redis/conf/redis.conf:/etc/redis/redis.conf\n\n# 将主机 /usr/local/redis/data目录下的data挂载到容器的/data\n-v /usr/local/redis/data:/data\n\n```\n\n- 进入容器启动命令行客户端\n\n```bash\n# 进入容器\ndocker exec -it redis-4.0.10 /bin/bash\n\n# 启动命令行客户端\nredis-cli\n```\n\n---\n\n#### 1.3 Redis的配置文件常用配置\n\n- 配置后台运行\n\n```bash\n# 是否以后台进程运行，默认为no\ndaemonize yes\n```\n\n- 配置端口\n\n```bash\n# 监听端口号，默认为6379\nport 6379\n```\n\n- 配置外网远程连接\n\n```bash\n# 绑定地址，默认为本地127.0.0.1\nbind 0.0.0.0\n```\n\n- 配置数据库数量\n\n```bash\n# 数据库数量，编号从0开始（默认使用0号库），默认为16\ndatabases 16\n```\n\n- 配置RDB（快照模式）持久化（默认持久化模式）\n\n```bash\n# 持久化文件名（必须以.rdb结尾），默认为dump.rdb\ndbfilename dump.rdb\n\n# 持久化文件存放的文件夹路径，默认为\"./\"\ndir ./\n\n# 持久化策略\nsave 900 1  # 在900s（15m）之后，至少有1个key发生变化，则快照\nsave 300 10  # 在300s（5m）之后，至少有10个key发生变化，则快照\nsave 60 10000 # 在60s（1m）之后，至少有1000个key发生变化，则快照\n\n```\n\n- 配置AOF（日志追加模式）持久化\n\n```bash\n# 是否开启AOF持久化，默认为no\nappendonly yes\n\n# AOF持久化日志文件名（必须以.aof结尾），默认为appendonly.aof\nappendfilename appendonly.aof\n\n# 持久化文件存放的文件夹路径，默认为\"./\"\ndir ./\n\n# AOF持久化三种同步策略\nappendfsync always  # 每次有数据发生变化时都会写入appendonly.aof\nappendfsync everysec # 默认方式，每秒同步一次到appendonly.aof\nappendfsync no    # 何时持久化交给操作系统决定进行\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n### 2. Redis的使用\n\n#### 2.1 命令行客户端操作指令\n\n##### 2.1.1 操作数据库的指令\n\n- 选择数据库\n\n```bash\nselect 1\t# 选择1号数据库\n```\n\n- 清空数据库\n\n```bash\n# 清空当前数据库\nflushdb\n\n# 清空所有数据库\nflushall\n```\n\n---\n\n##### 2.1.2 操作key的指令\n\n- 通过表达式查看key\n\n```bash\nkeys *\t# 查看所有key\n\n# *表示通配0个或多个, 例如：a*可以匹配a、aa、ab、abb等\n# ?表示通配1个，例如：a?可以匹配aa、ab、ac等\n# []表示匹配一个[]内包含的任意一个，例如：[abc]可以匹配a、b、c\n```\n\n- 查看key是否存在\n\n```bash\nexists name\t# 是否存在key名为name的key\n\n# 返回0表示不存在\n# 返回1表示存在\n```\n\n- 删除key\n\n```bash\ndel name\t# 删除key名为name的key\ndel name age # 删除key名为name和age的key（可一次删除多个key）\n```\n\n- 设置key的过期时间\n\n```bash\nexpire name 5\t# 设置key名为name的key5秒后过期（删除）\npexpire name 5000\t# 设置key名为name的key5000毫秒后过期（删除）\n\n# 返回1表示设置成功\n```\n\n- 查看key的过期时间\n\n```bash\nttl name # 查看key名为name的key还有多少秒过期\npttl name # 查看key名为name的key还有多少毫秒过期\n\n# 返回-2表示没有key\n# 返回-1表示key永久存在（没有过期时间）\n```\n\n- 将key移动到指定数据库\n\n```bash\nmove name 1 # 将key名为name的key移入1号数据库\n```\n\n- 获取一个随机key\n\n```bash\nrandomkey\n```\n\n- 更改key名\n\n```bash\nrename name name1\t# 将key名为name的key改名为name1\n```\n\n- 查看key对应值的类型\n\n```bash\ntype name\t# 查看key名为name的key对应值的类型\n```\n\n---\n\n##### 2.1.3 操作String类型的指令\n\n- 设置一个key/value\n\n```bash\nset name zhangsan\t# 设置key为name，value为张三\n```\n\n- 获取一个key对应的value\n\n```bash\nget name\t# 获取key名为name的key对应的value\n```\n\n- 设置多个key/value\n\n```bash\nmset name zhangsan age 18\t# 设置key为name，value为张三；设置key为age，value为18\n```\n\n- 设置一个key/value，同时设置key的过期时间\n\n```bash\nsetex name 5 zhangsan\t# 设置key为name，value为张三，过期时间为5秒\npsetex name 5000 zhangsan\t# 设置key为name，value为张三，过期时间为5000毫秒\n```\n\n- 如果key不存在则设置一个key/value\n\n```bash\nsetnx name zhangsan\t# 如果key名为name的key不存在，则设置key为name，value为张三\n```\n\n- 如果多个key同时不存在则设置多个key/value（只要有一个存在就全不设置）\n\n```bash\nmsetnx name zhangsan age 18\t# 如果key名为name和age的key不存在，则设置key为name，value为张三，设置key为age，value为18\n```\n\n- 获取多个key对应的value\n\n```bash\nmget name age\t# 获取key名为name的key对应的value；获取key名为age的key对应的value\n```\n\n- 获取一个key的值并设置一个新值\n\n```bash\ngetset name lisi\t# 获取key名为name的key对应的value，并设置value为lisi\n```\n\n- 获取key对应value的长度\n\n```bash\nstrlen name\t# 获取key名为name的key对应value的长度\n```\n\n- 追加内容到key对应value的尾部\n\n```bash\nappend name aaa\t# 追加\"aaa\"到key名为name的key对应value的尾部\n```\n\n- 获取key对应value的部分内容（下标从0开始）\n\n```bash\ngetrange name 1 3\t# 获取key名为name的key对应value下标从1到3的内容\ngetrange name 1 -1\t# 获取key名为name的key对应value下标从1到末尾的内容\n```\n\n- 若key对应value为数值类型，则value加1\n\n```bash\nincr age\t# key名为age的key对应value加1\n```\n\n- 若key对应value为数值类型，则value加自定义整数数值\n\n```bash\nincrby age 10 # key名为age的key对应value加10\n```\n\n- 若key对应value为数值类型，则value减1\n\n```bash\ndecr age\t# key名为age的key对应value减1\n```\n\n- 若key对应value为数值类型，则value减自定义整数数值\n\n```bash\ndecrby age 10 # key名为age的key对应value减10\n```\n\n- 若key对应value为数值类型，则value加自定义浮点数数值\n\n```bash\nincrbyfloat score 10.5 # key名为age的key对应value加10.5\n```\n\n---\n\n##### 2.1.4 操作List类型指令\n\n- 从列表首部添加一个或多个值到key列表中（key列表可以不存在）\n\n```bash\nlpush name zhangsan lisi wangwu\t# 从列表首部添加zhangsan、lisi、wangwu到name列表中\n```\n\n- 从列表首部添加一个或多个值到key列表中（key列表必须存在）\n\n```bash\nlpushx name zhangsan lisi wangwu\t# 从列表首部添加zhangsan、lisi、wangwu到name列表中\n```\n\n- 从列表尾部添加一个或多个值到key列表中（key列表可以不存在）\n\n```bash\nrpush name zhangsan lisi wangwu\t# 从列表尾部添加zhangsan、lisi、wangwu到name列表中\n```\n\n- 从列表尾部添加一个或多个值到key列表中（key列表必须存在）\n\n```bash\nrpushx name zhangsan lisi wangwu\t# 从列表尾部添加zhangsan、lisi、wangwu到name列表中\n```\n\n- 返回并移除列表首部的一个元素\n\n```bash\nlpop name\t# 返回name列表首元素并移除\n```\n\n- 返回并移除列表尾部的一个元素\n\n```bash\nrpop name\t# 返回name列表尾元素并移除\n```\n\n- 获取列表部分元素（下标从0开始）\n\n```bash\nlrange name 1 3\t# 返回name列表下标为1到3的元素\nlrange name 1 -1\t# 返回name列表下标为1到末尾的元素\n```\n\n- 获取列表的元素个数\n\n```bash\nllen name\t# 获取name列表的元素个数\n```\n\n- 设置列表对应下标元素的值（下标必须存在）\n\n```bash\nlset name 1 lisi\t# 设置name列表下标为1的值为lisi\n```\n\n- 获取列表指定下标的值\n\n```bash\nlindex name 1\t# 获取name列表下标为1的值\n```\n\n- 从头开始删除列表任意个数的相同值\n\n```bash\nlrem name 2 zhangsan\t# 从头开始删除2个值为zhangsan的值\n```\n\n- 保留列表下标区间的元素（下标从0开始）\n\n```bash\nltrim name 1 3\t# 保留name列表下标从1到3的元素\nltrim name 1 -1\t# 保留name列表下标从1到末尾的元素\n```\n\n- 在列表中插入一个元素\n\n```bash\nlinsert name before lisi zhangsan\t# 在name列表从头开始的第一个lisi前插入zhangsan\nlinsert name after lisi wangwu\t# 在name列表从头开始的第一个lisi后插入wangwu\n```\n\n---\n\n##### 2.1.5 操作Set类型指令\n\n- 向集合中添加元素\n\n```bash\nsadd name zhangsan lisi wangwu\t# 添加zhangsan、lisi、wangwu到name集合中\n```\n\n- 获取集合中的所有元素\n\n```bash\nsmembers name\t# 获取name集合中的所有元素\n```\n\n- 获取集合中元素的个数\n\n```bash\nscard name\t# 获取name集合中元素的个数\n```\n\n- 随机获取集合中的元素并移除\n\n```bash\nspop name\t# 随机获取name集合中的一个元素并移除\nspop name 2\t# 随机获取name集合中的两个元素并移除\n```\n\n- 将集合中的一个元素移动到另一个集合中\n\n```bash\nsmove name1 name2 zhangsan\t# 将name1集合中的zhangsan移动到name2集合中\n```\n\n- 删除集合中的一个或多个元素\n\n```bash\nsrem name zhangsan\t# 删除name集合中的zhangsan\nsrem name zhangsan lisi\t# 删除name集合中的zhangsan和lisi\n```\n\n- 判断集合中是否存在某个元素\n\n```bash\nsismember name zhangsan\t# 判断name集合中是否存在zhangsan\n```\n\n- 随机返回集合中的元素\n\n```bash\nsrandmember name\t# 随机返回name集合中的一个元素\nsrandmember name 2\t# 随机返回name集合中的两个元素\n```\n\n- 获取一个集合相对于其他集合的补集元素\n\n```bash\nsdiff name1 name2 name3\t# 获取name1集合相对于name2集合、name3集合的补集元素\n```\n\n- 获取一个集合相对于其他集合的交集元素\n\n```bash\nsinter name1 name2 name3\t# 获取name1集合相对于name2集合、name3集合的交集元素\n```\n\n- 获取一个集合相对于其他集合的并集\n\n```bash\nsunion name1 name2 name3\t# 获取name1集合相对于name2集合、name3集合的并集元素\n```\n\n---\n\n##### 2.1.6 操作ZSet类型的指令\n\n- 向有序集合中添加元素\n\n```bash\nzadd name 10 zhangsan 20 lisi 30 wangwu\t# 添加zhangsan(10分)、lisi(20分)、wangwu(30分)到name有序集合中\n```\n\n- 获取有序集合的元素个数\n\n```bash\nzcard name\t# 获取name有序集合的元素个数\n```\n\n- 获取有序集合部分元素（下标从0开始）\n\n```bash\nzrange name 1 3\t# name有序集合按升序排列并返回下标为1到3的元素\nzrange name 1 -1 withscores\t# name有序集合按升序排列并返回下标为1到末尾的元素以及元素对应的分数\n\nzrevrange name 1 3\t# name有序集合按降序排列并返回下标为1到3的元素\nzrevrange name 1 -1 withscores\t# name有序集合按降序排列并返回下标为1到3的元素以及元素对应的分数\n\nzrangebyscore name 0 100\t# name有序集合按升序排列并返回元素分数为0到100的元素\nzrangebyscore name 0 100 withscores\t# name有序集合按升序排列并返回元素分数为0到100的元素以及元素对应的分数\nzrangebyscore name 0 100 withscores limit 0 2\t# name有序集合按升序排列并返回元素分数为0到100的前两个元素以及元素对应的分数\n```\n\n- 获取有序集合某个元素的下标（下标从0开始）\n\n```bash\nzrank name zhangsan\t# name有序集合按升序排列并返回zhangsan的下标\n\nzrevrank name zhangsan\t# name有序集合按降序排列并返回zhangsan的下标\n```\n\n- 获取有序集合某个元素的的分数\n\n```bash\nzscore name zhangsan\t# 获取name有序集合zhangsan的分数\n```\n\n- 删除有序集合的一个或多个元素\n\n```bash\nzrem name zhangsan\t# 删除name有序集合的zhangsan\nzrem name zhangsan lisi\t# 删除name有序集合的zhangsan和lisi\n```\n\n- 为有序集合的某个元素增加自定义的分数\n\n```bash\nzincrby name 5 zhangsan\t# 为name有序集合的zhangsan增加5分\n```\n\n---\n\n##### 2.1.7 操作Hash类型的指令\n\n- 设置一个key/value\n\n```bash\nhset person name zhangsan\t# 设置key为person，value为一个key为name，value为zhangsan的键值对\n```\n\n- 获取key对应value其中一个hashkey对应的值\n\n```bash\nhget person name\t# 获取key名为person的key对应value其中一个hashkey为name对应的值\n```\n\n- 同时设置多个key/value\n\n```bash\nhmset person name zhangsan age 18\t# 设置key为person，value为一个key为name，value为zhangsan的键值对和一个key为age，value为18的键值对\n```\n\n- 同时获取key对应value其中多个hashkey对应的值\n\n```bash\nhmget person name age\t# 获取key名为person的key对应value中hashkey为name和age对应的值\n```\n\n- 如果key对应value中hashkey不存在则设置一个key/value\n\n```bash\nhsetnx person name zhangsan\t# 如果key名为person的key对应value中hashkey为name的hashkey不存在则设置一个hashkey为name，hashvalue为zhangsan的键值对\n```\n\n- 获取key对应value中的所有键值对\n\n```bash\nhgetall person\t# 获取key名为person的key对应value所有键值对\n```\n\n- 删除key对应value中的一个或多个hashkey\n\n```bash\nhdel person name age\t# 删除key名为person的key对应value中的name和age\n```\n\n- 判断key对应value中的一个hashkey是否存在\n\n```bash\nhexists person name\t# 判断key名为person的key对应value中的一个name是否存在\n```\n\n- 获取key对应value中的所有hashkey\n\n```bash\nhkeys person\t# 获取key名为person的key对应value中的所有hashkey\n```\n\n- 获取key对应value中的所有hashvalue\n\n```bash\nhvals person\t# 获取key名为person的key对应value中的所有hashvalue\n```\n\n- 若key对应value中的hashkey对应hashvalue为数值类型，则hashvalue加自定义整数数值\n\n```bash\nhincrby person age 2\t# key名为person的key对应value中的hashkey为age的hashkey对应的hashvalue加2\n```\n\n- 若key对应value中的hashkey对应hashvalue为数值类型，则hashvalue加自定义浮点数数值\n\n```bash\nhincrbyfloat person score 1.5\t# key名为person的key对应value中的hashkey为score的hashkey对应的hashvalue加1.5\n```\n\n---\n\n#### 2.2 原生Java操作Redis\n\n- 引入Redis依赖\n\n```xml\n<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n    <version>2.9.0</version>\n</dependency>\n```\n\n- 操作redis\n\n```java\nimport redis.clients.jedis.Jedis;\n\nimport java.util.Set;\n\n/**\n * 测试Redis\n */\npublic class TestRedis {\n\n    public static void main(String[] args) {\n\n        // 创建Jedis客户端对象\n        Jedis jedis = new Jedis(\"192.168.150.128\", 6379);\n        // 选择数据库（默认使用0号库）\n        jedis.select(0);\n\n        // Redis操作\n        Set<String> keys = jedis.keys(\"*\");\n        keys.forEach(System.out::println);\n\n        // 释放资源\n        jedis.close();\n\n    }\n\n}\n```\n\n---\n\n#### 2.3 SpringBoot操作Redis\n\n##### 2.3.1 SpringBoot整合Redis\n\n- 新建SpringBoot项目\n- pom.xml依赖\n\n```xml\n<!--引入Redis依赖-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n- application.yml配置\n\n```yaml\n# redis连接配置\nspring:\n  redis:\n    host: 192.168.150.128\n    port: 6379\n    database: 0\n```\n\n- 操作redis\n\n```java\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.data.redis.connection.DataType;\nimport org.springframework.data.redis.core.*;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\n@SpringBootTest\nclass SpringbootRedisApplicationTests {\n\n    /**\n     * String类型Redis模板，key和value都为String类型\n     */\n    @Autowired\n    private StringRedisTemplate stringRedisTemplate;\n\n    /**\n     * 通用类型Redis模板，key和value都为Object类型\n     */\n    @Autowired\n    private RedisTemplate<Object, Object> redisTemplate;\n\n\n    @Test\n    void stringRedisTemplateTest() {\n\n        /* ************ 操作Key ************ */\n\n        //  通过表达式查看key\n        Set<String> keys = stringRedisTemplate.keys(\"*\");\n        keys.forEach(System.out::println);\n\n        // 查看key是否存在\n        Boolean hasKey = stringRedisTemplate.hasKey(\"name\");\n        System.out.println(hasKey);\n\n        // 删除key\n        Boolean delete = stringRedisTemplate.delete(\"name\");\n        System.out.println(delete);\n\n        // 设置过期时间\n        stringRedisTemplate.expire(\"name\", 5, TimeUnit.SECONDS);\n\n        // 查看过期时间\n        Long expire = stringRedisTemplate.getExpire(\"name\", TimeUnit.SECONDS);\n        System.out.println(expire);\n\n        // 移动key\n        Boolean move = stringRedisTemplate.move(\"name\", 1);\n        System.out.println(move);\n\n        // 随机获取一个key\n        String randomKey = stringRedisTemplate.randomKey();\n        System.out.println(randomKey);\n\n        // 更改key名\n        stringRedisTemplate.rename(\"name\", \"newname\");\n\n        // 查看key类型\n        DataType type = stringRedisTemplate.type(\"name\");\n        System.out.println(type);\n\n\n        /* ************ 操作String类型 ************ */\n\n        Map<String, String> stringMap = new HashMap<>();\n        stringMap.put(\"name\", \"zhangsan\");\n        stringMap.put(\"age\", \"18\");\n\n        // 添加一个key/value\n        stringRedisTemplate.opsForValue().set(\"name\", \"zhangsan\");\n\n        // 获取一个key值\n        String value = stringRedisTemplate.opsForValue().get(\"name\");\n        System.out.println(value);\n\n        // 一次添加多个key/value\n        stringRedisTemplate.opsForValue().multiSet(stringMap);\n\n        // 添加一个key/value，同时设置过期时间\n        stringRedisTemplate.opsForValue().set(\"name\", \"zhangsan\", 5, TimeUnit.SECONDS);\n\n        // 如果key不存在，添加一个key/value\n        Boolean setIfAbsent = stringRedisTemplate.opsForValue().setIfAbsent(\"name\", \"zhangsan\");\n        System.out.println(setIfAbsent);\n\n        // 如果多个key同时不存在则设置多个key/value（只要有一个存在就全不设置）\n        stringRedisTemplate.opsForValue().multiSetIfAbsent(stringMap);\n\n        // 同时获取多个key值\n        List<String> multiGetValues = stringRedisTemplate.opsForValue().multiGet(Arrays.asList(\"name\", \"age\"));\n        multiGetValues.forEach(System.out::println);\n\n        // 获取一个key的值并设置一个新值\n        String oldValue = stringRedisTemplate.opsForValue().getAndSet(\"name\", \"lisi\");\n        System.out.println(oldValue);\n\n        // 获取key对应value的长度\n        Long size = stringRedisTemplate.opsForValue().size(\"name\");\n        System.out.println(size);\n\n        // 追加内容到key对应value的尾部\n        Integer append = stringRedisTemplate.opsForValue().append(\"name\", \"aaa\");\n        System.out.println(append);\n\n        // 获取key对应value的部分内容（下标从0开始）\n        String subName1 = stringRedisTemplate.opsForValue().get(\"name\", 1, 3);// 获取key名为name的key对应value下标从1到3的内容\n        String subName2 = stringRedisTemplate.opsForValue().get(\"name\", 1, -1);// 获取key名为name的key对应value下标从1到末尾的内容\n        System.out.println(subName1);\n        System.out.println(subName2);\n\n        // 若key对应value为数值类型，则value加1\n        Long incrementOne = stringRedisTemplate.opsForValue().increment(\"age\");\n        System.out.println(incrementOne);\n\n        // 若key对应value为数值类型，则value加自定义整数数值\n        Long incrementAny = stringRedisTemplate.opsForValue().increment(\"age\", 2);\n        System.out.println(incrementAny);\n\n        // 若key对应value为数值类型，则value减1\n        Long decrementOne = stringRedisTemplate.opsForValue().decrement(\"age\");\n        System.out.println(decrementOne);\n\n        // 若key对应value为数值类型，则value减自定义整数数值\n        Long decrementAny = stringRedisTemplate.opsForValue().decrement(\"age\", 2);\n        System.out.println(decrementAny);\n\n        // 若key对应value为数值类型，则value加自定义浮点数数值\n        Double incrementDouble = stringRedisTemplate.opsForValue().increment(\"score\", 1.5);\n        System.out.println(incrementDouble);\n\n\n        /* ************ 操作List类型 ************ */\n\n        // 从列表首部添加一个值到key列表中\n        Long leftPush = stringRedisTemplate.opsForList().leftPush(\"name\", \"zhangsan\");\n        System.out.println(leftPush);\n\n        // 从列表首部添加多个值到key列表中\n        Long leftPushAll = stringRedisTemplate.opsForList().leftPushAll(\"name\", \"zhangsan\", \"lisi\");\n        System.out.println(leftPushAll);\n\n        // 从列表尾部添加一个值到key列表中\n        Long rightPush = stringRedisTemplate.opsForList().rightPush(\"name\", \"zhangsan\");\n        System.out.println(rightPush);\n\n        // 从列表尾部添加多个值到key列表中\n        Long rightPushAll = stringRedisTemplate.opsForList().rightPush(\"name\", \"zhangsan\", \"lisi\");\n        System.out.println(rightPushAll);\n\n        // 返回并移除列表首部的一个元素\n        String leftPop = stringRedisTemplate.opsForList().leftPop(\"name\");\n        System.out.println(leftPop);\n\n        // 返回并移除列表尾部的一个元素\n        String rightPop = stringRedisTemplate.opsForList().rightPop(\"name\");\n        System.out.println(rightPop);\n\n        // 获取列表部分元素（下标从0开始）\n        List<String> range1 = stringRedisTemplate.opsForList().range(\"name\", 0, 1);\n        List<String> range2 = stringRedisTemplate.opsForList().range(\"name\", 0, -1);\n        range1.forEach(System.out::println);\n        range2.forEach(System.out::println);\n\n        // 获取列表的元素个数\n        Long listSize = stringRedisTemplate.opsForList().size(\"name\");\n        System.out.println(listSize);\n\n        // 设置列表对应下标元素的值（下标必须存在）\n        stringRedisTemplate.opsForList().set(\"name\", 0, \"lisi\");\n\n        // 获取列表指定下标的值\n        String index = stringRedisTemplate.opsForList().index(\"name\", 0);\n        System.out.println(index);\n\n        // 从头开始删除列表任意个数的相同值\n        Long remove = stringRedisTemplate.opsForList().remove(\"name\", 2, \"zhangsan\");\n        System.out.println(remove);\n\n        // 保留列表下标区间的元素（下标从0开始）\n        stringRedisTemplate.opsForList().trim(\"name\", 1, 3);    // 留name列表下标从1到3的元素\n        stringRedisTemplate.opsForList().trim(\"name\", 1, -1);   // 保留name列表下标从1到末尾的元素\n\n        // 在列表中某元素前插入一个元素\n        Long leftInsert = stringRedisTemplate.opsForList().leftPush(\"name\", \"lisi\", \"zhangsan\");    // 在name列表从头开始的第一个lisi前插入zhangsan\n        System.out.println(leftInsert);\n\n        // 在列表中某元素后插入一个元素\n        Long rightInsert = stringRedisTemplate.opsForList().rightPush(\"name\", \"lisi\", \"wangwu\");    // 在name列表从头开始的第一个lisi后插入wangwu\n        System.out.println(rightInsert);\n\n\n        /* ************ 操作Set类型 ************ */\n\n        // 向集合中添加一个或多个元素\n        Long add = stringRedisTemplate.opsForSet().add(\"name\", \"zhangsan\", \"lisi\");\n        System.out.println(add);\n\n        // 获取集合中的所有元素\n        Set<String> members = stringRedisTemplate.opsForSet().members(\"name\");\n        members.forEach(System.out::println);\n\n        // 获取集合中元素的个数\n        Long sSize = stringRedisTemplate.opsForSet().size(\"name\");\n        System.out.println(sSize);\n\n        // 随机获取集合中的元素并移除\n        String sPopOne = stringRedisTemplate.opsForSet().pop(\"name\");   // 随机获取name集合中的一个元素并移除\n        List<String> sPopAny = stringRedisTemplate.opsForSet().pop(\"name\", 2);  // 随机获取name集合中的两个元素并移除\n        System.out.println(sPopOne);\n        sPopAny.forEach(System.out::println);\n\n        // 将集合中的一个元素移动到另一个集合中\n        Boolean sMove = stringRedisTemplate.opsForSet().move(\"name1\", \"zhangsan\", \"name2\"); // 将name1集合中的zhangsan移动到name2集合中\n        System.out.println(sMove);\n\n        // 删除集合中的一个或多个元素\n        stringRedisTemplate.opsForSet().remove(\"name\", \"zhangsan\", \"lisi\");\n\n        // 判断集合中是否存在某个元素\n        Boolean isMember = stringRedisTemplate.opsForSet().isMember(\"name\", \"zhangsan\");\n        System.out.println(isMember);\n\n        // 随机返回集合中的一个元素\n        String randomMember = stringRedisTemplate.opsForSet().randomMember(\"name\");\n        System.out.println(randomMember);\n\n        // 随机返回集合中的多个元素\n        List<String> randomMembers = stringRedisTemplate.opsForSet().randomMembers(\"name\", 2);\n        randomMembers.forEach(System.out::println);\n\n        // 获取一个集合相对于其他集合的补集元素\n        Set<String> difference = stringRedisTemplate.opsForSet().difference(\"name1\", Arrays.asList(\"name2\", \"name3\"));\n        difference.forEach(System.out::println);\n\n        // 获取一个集合相对于其他集合的交集元素\n        Set<String> intersect = stringRedisTemplate.opsForSet().intersect(\"name1\", Arrays.asList(\"name2\", \"name3\"));\n        intersect.forEach(System.out::println);\n\n        // 获取一个集合相对于其他集合的并集\n        Set<String> union = stringRedisTemplate.opsForSet().union(\"name1\", Arrays.asList(\"name2\", \"name3\"));\n        union.forEach(System.out::println);\n\n\n        /* ************ 操作ZSet类型 ************ */\n\n        Set<ZSetOperations.TypedTuple<String>> zSet = new HashSet<>();\n        zSet.add(new DefaultTypedTuple<>(\"zhagnsan\", 10.0));\n        zSet.add(new DefaultTypedTuple<>(\"lisi\", 20.0));\n\n        // 向有序集合中添加一个元素\n        Boolean zAddOne = stringRedisTemplate.opsForZSet().add(\"name\", \"zhangsan\", 10);// 添加zhangsan(10分)到name有序集合中\n        System.out.println(zAddOne);\n\n        // 向有序集合中添加多个元素\n        Long zAddAny = stringRedisTemplate.opsForZSet().add(\"name\", zSet);\n        System.out.println(zAddAny);\n\n        // 获取有序集合的元素个数\n        Long zSize = stringRedisTemplate.opsForZSet().size(\"name\");\n        System.out.println(zSize);\n\n        // 获取有序集合部分元素（下标从0开始）\n        Set<String> zRange1 = stringRedisTemplate.opsForZSet().range(\"name\", 1, 3); // name有序集合按升序排列并返回下标为1到3的元素\n        zRange1.forEach(System.out::println);\n\n        Set<ZSetOperations.TypedTuple<String>> zRang2 = stringRedisTemplate.opsForZSet().rangeWithScores(\"name\", 1, -1);    // name有序集合按升序排列并返回下标为1到末尾的元素以及元素对应的分数\n        zRang2.forEach(typedTuple -> {\n            System.out.println(typedTuple.getValue());\n            System.out.println(typedTuple.getScore());\n        });\n\n        Set<String> zRevRange1 = stringRedisTemplate.opsForZSet().reverseRange(\"name\", 1, 3);   // name有序集合按降序排列并返回下标为1到3的元素\n        zRevRange1.forEach(System.out::println);\n\n        Set<ZSetOperations.TypedTuple<String>> zRevRange2 = stringRedisTemplate.opsForZSet().reverseRangeWithScores(\"name\", 1, -1);    // name有序集合按升序排列并返回下标为1到末尾的元素以及元素对应的分数\n        zRevRange2.forEach(typedTuple -> {\n            System.out.println(typedTuple.getValue());\n            System.out.println(typedTuple.getScore());\n        });\n\n        Set<String> rangeByScore = stringRedisTemplate.opsForZSet().rangeByScore(\"name\", 0, 100);   // name有序集合按升序排列并返回元素分数为0到100的元素\n        rangeByScore.forEach(System.out::println);\n\n        Set<ZSetOperations.TypedTuple<String>> rangeByScoreWithScores1 = stringRedisTemplate.opsForZSet().rangeByScoreWithScores(\"name\", 0, 100);   // name有序集合按升序排列并返回元素分数为0到100的元素以及元素对应的分数\n        rangeByScoreWithScores1.forEach(typedTuple -> {\n            System.out.println(typedTuple.getValue());\n            System.out.println(typedTuple.getScore());\n        });\n\n        Set<ZSetOperations.TypedTuple<String>> rangeByScoreWithScores2 = stringRedisTemplate.opsForZSet().rangeByScoreWithScores(\"name\", 0, 100, 0, 2);   // name有序集合按升序排列并返回元素分数为0到100的前两个元素以及元素对应的分数\n        rangeByScoreWithScores2.forEach(typedTuple -> {\n            System.out.println(typedTuple.getValue());\n            System.out.println(typedTuple.getScore());\n        });\n\n        // 获取有序集合某个元素的下标（下标从0开始）\n        Long rank = stringRedisTemplate.opsForZSet().rank(\"name\", \"zhangsan\");  // name有序集合按升序排列并返回zhangsan的下标\n        System.out.println(rank);\n\n        Long reverseRank = stringRedisTemplate.opsForZSet().reverseRank(\"name\", \"zhangsan\");    // name有序集合按降序排列并返回zhangsan的下标\n        System.out.println(reverseRank);\n\n        // 获取有序集合某个元素的的分数\n        Double score = stringRedisTemplate.opsForZSet().score(\"name\", \"zhangsan\");\n        System.out.println(score);\n\n        // 删除有序集合的一个或多个元素\n        Long zRemove = stringRedisTemplate.opsForZSet().remove(\"name\", \"zhangsan\", \"lisi\");\n        System.out.println(zRemove);\n\n        // 为有序集合的某个元素增加自定义的分数\n        Double incrementScore = stringRedisTemplate.opsForZSet().incrementScore(\"name\", \"zhangsan\", 5);\n        System.out.println(incrementScore);\n\n\n        /* ************ 操作Hash类型 ************ */\n\n        Map<String, Object> hash = new HashMap<>();\n        hash.put(\"name\", \"zhangsan\");\n        hash.put(\"age\", 18);\n\n        // 设置一个key/value\n        stringRedisTemplate.opsForHash().put(\"person\", \"name\", \"zhangsan\");\n\n        // 获取key对应value其中一个hashkey对应的值\n        Object hashValue = stringRedisTemplate.opsForHash().get(\"person\", \"name\");\n        System.out.println(hashValue);\n\n        // 同时设置多个key/value\n        stringRedisTemplate.opsForHash().putAll(\"person\", hash);\n\n        // 同时获取key对应value其中多个hashkey对应的值\n        List<Object> multiGet = stringRedisTemplate.opsForHash().multiGet(\"person\", Arrays.asList(\"name\", \"age\"));\n        multiGet.forEach(System.out::println);\n\n        // 如果key对应value中hashkey不存在则设置一个key/value\n        Boolean putIfAbsent = stringRedisTemplate.opsForHash().putIfAbsent(\"person\", \"name\", \"zhangsan\");\n        System.out.println(putIfAbsent);\n\n        // 获取key对应value中的所有键值对\n        Map<Object, Object> person = stringRedisTemplate.opsForHash().entries(\"person\");\n        System.out.println(person);\n\n        // 删除key对应value中的一个或多个hashkey\n        Long hashDelete = stringRedisTemplate.opsForHash().delete(\"person\", \"name\", \"age\");\n        System.out.println(hashDelete);\n\n        // 判断key对应value中的一个hashkey是否存在\n        Boolean hashHasKey = stringRedisTemplate.opsForHash().hasKey(\"person\", \"name\");\n        System.out.println(hashHasKey);\n\n        // 获取key对应value中的所有hashkey\n        Set<Object> hashKeys = stringRedisTemplate.opsForHash().keys(\"person\");\n        hashKeys.forEach(System.out::println);\n\n        // 获取key对应value中的所有hashvalue\n        List<Object> hashValues = stringRedisTemplate.opsForHash().values(\"person\");\n        hashValues.forEach(System.out::println);\n\n        // 若key对应value中的hashkey对应hashvalue为数值类型，则hashvalue加自定义整数数值\n        Long hashIncrement1 = stringRedisTemplate.opsForHash().increment(\"person\", \"age\", 2);\n        System.out.println(hashIncrement1);\n\n        // 若key对应value中的hashkey对应hashvalue为数值类型，则hashvalue加自定义浮点数数值\n        Double hashIncrement2 = stringRedisTemplate.opsForHash().increment(\"person\", \"score\", 1.5);\n        System.out.println(hashIncrement2);\n\n    }\n\n    @Test\n    void redisTemplateTest() {\n\n        // 设置key以String方式序列化\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        // 设置hashKey以String方式序列化\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n\n        // 以绑定的方式操作key（用于简化书写多次操作同一个key）\n        BoundValueOperations<Object, Object> boundValueOps = redisTemplate.boundValueOps(\"name\");\n        boundValueOps.set(\"zhangsan\");\n        boundValueOps.append(\"aaa\");\n\n        /* ************ 操作redis同stringRedisTemplate ************ */\n\n    }\n\n}\n```\n\n---\n\n##### 2.3.2 通过Mybatis的二级缓存实现分布式缓存\n\n- pom.xml依赖\n\n```xml\n<dependencies>\n\n    <!--web依赖-->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\n    <!--redis依赖-->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-data-redis</artifactId>\n    </dependency>\n\n    <!--mysql数据库驱动-->\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <version>5.1.38</version>\n    </dependency>\n\n    <!--mybatis依赖-->\n    <dependency>\n        <groupId>org.mybatis.spring.boot</groupId>\n        <artifactId>mybatis-spring-boot-starter</artifactId>\n        <version>2.1.3</version>\n    </dependency>\n\n    <!--druid数据源-->\n    <dependency>\n        <groupId>com.alibaba</groupId>\n        <artifactId>druid</artifactId>\n        <version>1.1.20</version>\n    </dependency>\n\n    <!--lombok依赖-->\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n        <optional>true</optional>\n    </dependency>\n\n    <!--测试依赖-->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <scope>test</scope>\n    </dependency>\n\n</dependencies>\n```\n\n- application.yml配置\n\n```yaml\n# web端口\nserver:\n  port: 8080\n\nspring:\n\n  application:\n    name: rediscache\n\n  # redis连接配置\n  redis:\n    host: 192.168.150.128\n    port: 6379\n    database: 0\n\n  # mysql连接配置\n  datasource:\n    # 数据库连接\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai\n    username: root\n    password:\n\n    # 数据源配置\n    type: com.alibaba.druid.pool.DruidDataSource\n\n# mybatis配置\nmybatis:\n  mapper-locations: classpath*:mapper/**/*.xml\n  type-aliases-package: com.mo.rediscache.model.entity\n\n# 日志配置\nlogging:\n  level:\n    com.mo.rediscache.mapper: debug\n```\n\n- Spring容器工具类\n\n```java\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\n\n/**\n * Spring容器工具类\n */\n@Component\npublic class ApplicationContextUtils implements ApplicationContextAware {\n\n    /** Spring容器 */\n    private static ApplicationContext applicationContext;\n\n    /**\n     * Spring容器设置\n     */\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        ApplicationContextUtils.applicationContext = applicationContext;\n    }\n\n    /**\n     * 获取Bean\n     */\n    public static Object getBean(String beanName) {\n        return ApplicationContextUtils.applicationContext.getBean(beanName);\n    }\n\n}\n```\n\n- 自定义Redis缓存类\n\n```java\nimport com.mo.rediscache.util.ApplicationContextUtils;\nimport org.apache.ibatis.cache.Cache;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\nimport org.springframework.util.DigestUtils;\n\n/**\n * Redis缓存\n */\npublic class RedisCache implements Cache {\n\n    /** 缓存命名空间唯一标识 */\n    private final String id;\n\n\n    /**\n     * Redis缓存构造方法\n     *\n     * @param id 缓存命名空间唯一标识\n     */\n    public RedisCache(String id) {\n        this.id = id;\n    }\n\n    /**\n     * 返回缓存命名空间唯一标识\n     */\n    @Override\n    public String getId() {\n        return this.id;\n    }\n\n    /**\n     * 添加缓存\n     */\n    @Override\n    public void putObject(Object key, Object value) {\n        this.getRedisTemplate().opsForHash().put(this.id, this.md5Key(key), value);\n    }\n\n    /**\n     * 获取缓存\n     */\n    @Override\n    public Object getObject(Object key) {\n        return this.getRedisTemplate().opsForHash().get(this.id, this.md5Key(key));\n    }\n\n    /**\n     * 删除缓存（保留方法）\n     */\n    @Override\n    public Object removeObject(Object key) {\n        return null;\n    }\n\n    /**\n     * 清空缓存\n     */\n    @Override\n    public void clear() {\n        this.getRedisTemplate().delete(this.id);\n    }\n\n    /**\n     * 获取缓存数量\n     */\n    @Override\n    public int getSize() {\n        return this.getRedisTemplate().opsForHash().size(this.id).intValue();\n    }\n\n    /**\n     * 获取Redis操作模板对象\n     */\n    private RedisTemplate<String, Object> getRedisTemplate() {\n\n        // 获取Redis操作模板对象\n        RedisTemplate<String, Object> redisTemplate = (RedisTemplate<String, Object>) ApplicationContextUtils.getBean(\"redisTemplate\");\n        // 设置key以String方式序列化\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        // 设置hashKey以String方式序列化\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n\n        return redisTemplate;\n    }\n\n    /**\n     * 获取key的MD5值\n     */\n    private String md5Key(Object key) {\n        return DigestUtils.md5DigestAsHex(key.toString().getBytes());\n    }\n\n}\n```\n\n- Person实体类\n\n```java\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.io.Serializable;\n\n@Data\n@Accessors(chain = true)\npublic class Person implements Serializable {\n\n    private Integer id;\n    private String name;\n    private Integer age;\n    private Boolean sex;\n\n    private Telephone telephone;\n\n}\n```\n\n- Telephone实体类\n\n```java\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.io.Serializable;\n\n@Data\n@Accessors(chain = true)\npublic class Telephone implements Serializable {\n\n    private Integer id;\n    private String number;\n\n}\n```\n\n- PersonMapper接口\n\n```java\nimport com.mo.rediscache.model.entity.Person;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface PersonMapper {\n\n    // 获取所有数据\n    List<Person> findAll();\n\n}\n```\n\n- TelephoneMapper接口\n\n```java\nimport com.mo.rediscache.model.entity.Telephone;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface TelephoneMapper {\n\n    // 通过ID查询数据\n    Telephone getTelephoneById(Integer id);\n\n}\n```\n\n- PersonMapper.xml映射文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.mo.rediscache.mapper.PersonMapper\">\n\n    <!--开启二级缓存-->\n    <cache type=\"com.mo.rediscache.cache.RedisCache\" />\n\n    <resultMap id=\"personMap\" type=\"Person\">\n        <id property=\"id\" column=\"id\"/>\n        <result property=\"name\" column=\"name\"/>\n        <result property=\"age\" column=\"age\"/>\n        <result property=\"sex\" column=\"sex\"/>\n        <association property=\"telephone\" select=\"com.mo.rediscache.mapper.TelephoneMapper.getTelephoneById\" column=\"telephone_id\"></association>\n    </resultMap>\n\n    <select id=\"findAll\" resultMap=\"personMap\">\n        SELECT id, name, age, sex, telephone_id\n        FROM person\n    </select>\n\n</mapper>\n```\n\n- TelephoneMappe.xml映射文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.mo.rediscache.mapper.TelephoneMapper\">\n\n    <!--开启二级缓存关联-->\n    <cache-ref namespace=\"com.mo.rediscache.mapper.PersonMapper\"/>\n\n    <select id=\"getTelephoneById\" parameterType=\"Integer\" resultType=\"Telephone\">\n        SELECT id, number\n        FROM telephone\n        WHERE id = #{id}\n    </select>\n\n</mapper>\n```\n\n- PersonService接口\n\n```java\nimport com.mo.rediscache.model.entity.Person;\n\nimport java.util.List;\n\npublic interface PersonService {\n\n    List<Person> findAll();\n\n}\n```\n\n- TelephoneService接口\n\n```java\nimport com.mo.rediscache.model.entity.Telephone;\n\npublic interface TelephoneService {\n\n    // 通过ID查询数据\n    Telephone getTelephoneById(Integer id);\n\n}\n```\n\n- PersonServiceImpl实现类\n\n```java\nimport com.mo.rediscache.mapper.PersonMapper;\nimport com.mo.rediscache.model.entity.Person;\nimport com.mo.rediscache.service.PersonService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class PersonServiceImpl implements PersonService {\n\n    @Autowired\n    private PersonMapper personMapper;\n\n    @Override\n    public List<Person> findAll() {\n        return personMapper.findAll();\n    }\n\n}\n```\n\n- TelephoneServiceImpl实现类\n\n```java\nimport com.mo.rediscache.mapper.TelephoneMapper;\nimport com.mo.rediscache.model.entity.Telephone;\nimport com.mo.rediscache.service.TelephoneService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class TelephoneServiceImpl implements TelephoneService {\n\n    @Autowired\n    private TelephoneMapper telephoneMapper;\n\n    @Override\n    public Telephone getTelephoneById(Integer id) {\n        return telephoneMapper.getTelephoneById(id);\n    }\n}\n```\n\n- application启动类\n\n```java\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@MapperScan(\"com.mo.rediscache.mapper\")\n@SpringBootApplication\npublic class RediscacheApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(RediscacheApplication.class, args);\n    }\n\n}\n```\n\n- 测试类\n\n```java\nimport com.mo.rediscache.model.entity.Person;\nimport com.mo.rediscache.service.PersonService;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport java.util.List;\n\n@SpringBootTest(classes = RediscacheApplication.class)\n@RunWith(SpringRunner.class)\npublic class RediscacheApplicationTests {\n\n    @Autowired\n    private PersonService personService;\n\n\n    @Test\n    public void test() {\n\n        System.out.println(\"第一次获取值：\");\n        List<Person> personList = personService.findAll();\n        personList.forEach(System.out::println);\n        System.out.println(\"================================\");\n        System.out.println(\"第二次获取值：\");\n        List<Person> personList2 = personService.findAll();\n        personList2.forEach(System.out::println);\n\n    }\n\n}\n```\n\n---\n\n##### 2.3.3 通过接管spring提供的session实现分布式session管理\n\n- pom.xml依赖\n\n```xml\n<dependencies>\n\n    <!--web依赖-->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\n    <!--redis操作依赖-->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-data-redis</artifactId>\n    </dependency>\n\n    <!--redis管理session依赖-->\n    <dependency>\n        <groupId>org.springframework.session</groupId>\n        <artifactId>spring-session-data-redis</artifactId>\n    </dependency>\n\n    <!--测试依赖-->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <scope>test</scope>\n    </dependency>\n\n</dependencies>\n```\n\n- application.yml配置\n\n```yaml\n# web端口\nserver:\n  port: 8080\n\nspring:\n\n  application:\n    name: redissession\n\n  # redis连接配置\n  redis:\n    host: 192.168.150.128\n    port: 6379\n    database: 0\n```\n\n- Redis管理Session配置类\n\n```java\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;\n\n/**\n * Redis管理Session配置类\n */\n@Configuration\n@EnableRedisHttpSession // 开启RedisHttpSession\npublic class RedisSessionManagerConfiguration {\n}\n```\n\n- controller测试\n\n```java\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport java.io.IOException;\n\n@Controller\n@RequestMapping(\"/test\")\npublic class TestController {\n\n    @RequestMapping(\"/look\")\n    public void look(HttpServletRequest request, HttpServletResponse response) throws IOException {\n\n        // 获取Session\n        HttpSession session = request.getSession();\n\n        // 获取Session中的数据\n        Integer look = (Integer) session.getAttribute(\"look\");\n\n        if (look == null) {\n            look = 0;\n        }\n\n        look += 1;\n\n        // 同步Redis中的Session数据\n        session.setAttribute(\"look\", look);\n\n        response.getWriter().println(\"look: \" + look);\n        response.getWriter().println(\"sessionid: \" + session.getId());\n    }\n\n}\n```","categoryId":"1","categoryName":"技术记录","tags":[{"id":"2","name":"Java"},{"id":"9","name":"中间件"},{"id":"11","name":"Redis"}],"views":5,"topping":false,"status":1,"createTime":"2022-10-24 21:03:59"}}