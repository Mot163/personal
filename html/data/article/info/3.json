{"code":0,"message":"获取文章简要信息成功!","data":{"id":"3","title":"Java流程控制","description":"Java流程控制","cover":"","content":"## 1. 顺序结构\n\n- Java的基本结构就是顺序结构,除非特别指明,否则就是按照顺序一句一句执行\n- <font color=red>顺序结构是最简单的算法结构</font>\n- 执行方式：从上往下，依次执行\n\n```java\npublic class Demo {\n \n    public static void main(String[] args) {\n \n        System.out.println(\"这是第一句\");\n        System.out.println(\"这是第二句\");\n        System.out.println(\"这是第三句\");\n        System.out.println(\"这是第四句\");\n        \n        /*\n         输出结果：\n         这是第一句\n         这是第二句\n         这是第三句\n         这是第四句\n         */\n \n    }\n \n}\n```\n\n\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 2. 选择结构\n\n- java的选择结构是根据条件判断之后再做处理的一种语法结构，使程序运行更加灵活\n- 执行方式：根据判断条件选择要执行的语句分支\n\n#### 2.1 if单选结构\n\n- 拥有一个选择分支，条件成立则执行分支语句，否则跳过继续执行之后的语句\n- 语法结构：if(条件){代码块}\n\n```java\npublic class Demo {\n \n    public static void main(String[] args) {\n \n        int num = 10;\n        \n        if(num>0) {\n            System.out.println(\"num大于0\");\n        }\n        \n        System.out.println(\"结束\");\n        \n        /*\n         输出结果：\n         num大于0\n         结束\n         */\n \n    }\n \n}\n```\n\n#### 2.2 if-else双选结构\n\n- 拥有两个选择分支，条件成立则执行if下的语句，否则执行else下的语句\n- 语法结构：if(条件){代码块1} else {代码块2}\n\n```java\npublic class Demo {\n \n    public static void main(String[] args) {\n \n        int num = -10;\n        \n        if(num>0) {\n            System.out.println(\"num大于0\");\n        }else {\n            System.out.println(\"num小于0\");\n        }\n        \n        System.out.println(\"结束\");\n        \n        /*\n         输出结果：\n         num小于0\n         结束\n         */\n \n    }\n \n}\n```\n\n#### 2.3 if-elseif-else多选结构\n\n- 拥有多个选择分支，条件1成立则执行条件1下的语句，条件2成立则执行条件2下的语句，…，全都不成立执行else下的语句（else部分可不写）\n- 语法结构：if(条件1){代码块1} else if(条件2){代码块2}…[else {代码块n}]\n\n```java\npublic class Demo {\n \n    public static void main(String[] args) {\n \n        int score = 80;\n        \n        if(score>=90) {\n            System.out.println(\"A\");\n        }else if(score>=80) {\n            System.out.println(\"B\");\n        }else if(score>=70) {\n            System.out.println(\"C\");\n        }else if(score>=60) {\n            System.out.println(\"D\");\n        }else if(score>=0) {\n            System.out.println(\"E\");\n        }else {\n            System.out.println(\"成绩有误！\");\n        }\n        \n        System.out.println(\"结束\");\n        \n        /*\n         输出结果：\n         B\n         结束\n         */\n \n    }\n \n}\n```\n\n#### 2.4 switch-case多选结构\n\n- 拥有多个选择分支，通过判断变量与某一个值相等来选择哪一个分支执行，都不相等则执行default分支（default部分可以不写）\n- <font color=red>每一个case分支的代码块最后一般要添加break结束switch，否则将继续执行下一个case分支</font>\n- 语法结构：switch(判断值){case 值1: 代码块1 [break;] case 值2: 代码块2 [break;] …default:代码块n}\n\n```java\npublic class Demo {\n \n    public static void main(String[] args) {\n \n        int num = 3;\n        \n        switch(num) {\n            case 1:\n                System.out.println(\"num为1\");\n                break;\n            case 2:\n                System.out.println(\"num为2\");\n                break;\n            case 3:\n                System.out.println(\"num为3\");\n                break;\n            case 4:\n                System.out.println(\"num为4\");\n                break;\n            case 5:\n                System.out.println(\"num为5\");\n                break;\n            default:\n                System.out.println(\"没有num的值\");\n        }\n        \n        System.out.println(\"结束\");\n        \n        /*\n         输出结果：\n         num为3\n         结束\n         */\n \n    }\n \n}\n```\n\n\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 3. 循环结构\n\n- java的循环结构用于执行具有重复性的工作，让代码编写更简便\n- 执行方式：根据条件判断执行重复的语句\n\n#### 3.1 while循环结构\n\n- 通过判断while条件是否成立来决定循环体是否再次执行\n- 进入循环体之前就进行判断\n- 语法结构：while(条件){循环体}\n\n```java\npublic class Demo {\n \n    public static void main(String[] args) {\n \n        //输出0~4\n        int num = 0;\n        \n        while(num<5) {\n            System.out.println(num);\n            num++;\n        }\n        \n        System.out.println(\"结束\");\n        \n        /*\n         输出结果：\n         0\n         1\n         2\n         3\n         4\n         结束\n         */\n \n    }\n \n}\n```\n\n#### 3.2 do-while循环结构\n\n- 通过判断while条件是否成立来决定循环体是否再次执行\n- 进入循环体之后才进行判断，循环体至少执行一次\n- <font color=red>在while(条件)后要加上“;”</font>\n- 语法结构：do {循环体}while(条件);\n\n```java\npublic class Demo {\n \n    public static void main(String[] args) {\n \n        int num = 10;\n        \n        do\n        {\n            System.out.println(num);\n            num++;\n        }while(num<5);\n        \n        System.out.println(\"结束\");\n        \n        /*\n         输出结果：\n         10\n         结束\n         */\n \n    }\n \n}\n```\n\n#### 3.3 for循环结构\n\n- for循环结构是支持迭代的一种通用结构，是最有效，最灵活的循环结构\n- for循环结构在循环之前就确定了循环的次数\n- 语法结构：for(初始化;判断条件;更新) {代码块}\n\n```java\npublic class Demo {\n \n    public static void main(String[] args) {\n \n        //输出0~4\n        int num = 5;\n        \n        for(int i=0;i<num;i++) {\n            System.out.println(i);\n        }\n        \n        System.out.println(\"结束\");\n        \n        /*\n         输出结果：\n         0\n         1\n         2\n         3\n         4\n         结束\n         */\n        \n        //for(;;)为无条件循环\n \n    }\n \n}\n```\n\n#### 3.4 for循环增强结构\n\n- for循环增强结构主要用于数组和集合\n- 语法结构：for(声名语句:表达式) {代码块}\n\n```java\npublic class Demo {\n \n    public static void main(String[] args) {\n \n        //输出数组arrNum的元素\n        int[] arrNum = {1,2,3,4,5};\n        \n        for(int i:arrNum) {\t//i应为后面的数组或集合对应的元素类型\n            System.out.println(i);\n        }\n        \n        System.out.println(\"结束\");\n        \n        /*\n         输出结果：\n         1\n         2\n         3\n         4\n         5\n         结束\n         */\n \n    }\n \n}\n```\n\n\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 4. break、continue、goto\n\n#### 4.1 break\n\n- break用于任何循环语句以及switch多选结构中，其功能为结束循环语句或switch多选结构，即不执行循环体或switch多选结构剩余的语句\n\n```java\npublic class Demo {\n \n    public static void main(String[] args) {\n \n        //输出0~5\n        int num = 100;\n        \n        for(int i=0;i<num;i++) {\n            System.out.println(i);\n            if(i==5) {\n                break;\n            }\n        }\n        \n        System.out.println(\"结束\");\n        \n        /*\n         输出结果：\n         0\n         1\n         2\n         3\n         4\n         5\n         结束\n         */\n \n    }\n \n}\n```\n\n#### 4.2 continue\n\n- continue用于循环语句，其功能为结束当次循环，即跳过当次循环进行下一次循环\n\n```java\npublic class Demo {\n \n    public static void main(String[] args) {\n \n        //输出0到10的奇数\n        int num = 10;\n        \n        for(int i=0;i<num;i++) {\n            if(i%2==0) {\n                continue;\n            }\n            System.out.println(i);\n        }\n        \n        System.out.println(\"结束\");\n        \n        /*\n         输出结果：\n         1\n         3\n         5\n         7\n         9\n         结束\n         */\n \n    }\n \n}\n```\n\n#### 4.3 goto\n\n- java语言中虽然有goto关键字，但并未得到正式使用，只能在带标签的break和continue中看到goto的影子（不推荐使用）\n\n```java\npublic class Demo {\n \n    public static void main(String[] args) {\n \n        //输出10到20的质数\n        next:for(int i=10;i<=20;i++) {\n            for(int j=2;j<i/2;j++) {\n            \tif(i%j==0) {\n                    continue next;\n                }\n        \t}\n            System.out.println(i);\n        }\n        \n        System.out.println(\"结束\");\n        \n        /*\n         输出结果：\n         11\n         13\n         17\n         19\n         结束\n         */\n \n    }\n \n}\n```","categoryId":"1","categoryName":"技术记录","tags":[{"id":"2","name":"Java"}],"views":2,"topping":false,"status":1,"createTime":"2022-10-24 20:45:07"}}