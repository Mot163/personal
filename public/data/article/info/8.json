{"code":0,"message":"获取文章简要信息成功!","data":{"id":"8","title":"Java网络编程","description":"Java网络编程","cover":"","content":"## 1. 认识计算机网络\n\n- 计算机网络是指将<font color=red>地理位置不同</font>的具有独立功能的<font color=red>多台计算机及其外部设备</font>，通过<font color=red>通信线路连接</font>起来，在网络操作系统，网络管理软件及网络<font color=red>通信协议</font>的管理和协调下，实现<font color=red>资源共享和信息传递</font>的计算机系统。\n\n  - 实体：地理位置不同的多台计算机及其外部设备（用IP、端口确定位置）\n  - 媒介：通过通信线路连接（光纤、电缆、无线电等）\n  - 管理方法：使用通信协议管理和协调（HTTP、FTP、TCP、IP等）\n  - 用途：资源共享和信息传递\n\n- 计算机网络的参考模型：\n\n  ![1](https://img-blog.csdnimg.cn/20200819121158103.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpbmdKaW5fbW8=,size_16,color_FFFFFF,t_70#pic_center)\n\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 2. IP和端口\n\n#### 2.1 IP\n\n- IP全称InternetProtocol(互联网协议)，用于区分不同的主机，具有定位的作用\n\n- IP一共分为五类：A类、B类、C类、D类和E类，前三类为主要的地址，D类和E类是特殊地址\n\n  - A类：(1.0.0.0-126.0.0.0)（默认子网掩码：255.0.0.0或 0xFF000000）第一个字节为网络号，后三个字节为主机号。该类IP地址的最前面为“0”，所以地址的网络号取值于1~126之间。一般用于大型网络。\n  - B类：(128.0.0.0-191.255.0.0)（默认子网掩码：255.255.0.0或0xFFFF0000）前两个字节为网络号，后两个字节为主机号。该类IP地址的最前面为“10”，所以地址的网络号取值于128~191之间。一般用于中等规模网络。\n  - C类：(192.0.0.0-223.255.255.0)（子网掩码：255.255.255.0或 0xFFFFFF00）前三个字节为网络号，最后一个字节为主机号。该类IP地址的最前面为“110”，所以地址的网络号取值于192~223之间。一般用于小型网络。\n  - D类：是多播地址。该类IP地址的最前面为“1110”，所以地址的网络号取值于224~239之间。一般用于多路广播用户[1]  。\n  - E类：是保留地址。该类IP地址的最前面为“1111”，所以地址的网络号取值于240~255之间。\n\n  ![2](https://img-blog.csdnimg.cn/20200819121228222.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpbmdKaW5fbW8=,size_16,color_FFFFFF,t_70#pic_center)\n\n\n  - 全0和全1的地址都保留不用\n  - 127.0.0.1为回送地址，也是本机地址，等效于localhost\n  - 在主要的三类地中，各保留了一段区域作为私有地址\n    - A类私有地址：10.0.0.0~10.255.255.255\n    - B类私有地址：172.16.0.0~172.31.255.255\n    - C类私有地址：192.168.0.0~192.168.255.255\n\n- 在Java中，用一个IP对象InetAddress表示IP\n\n  ```java\n  String address = \"127.0.0.1\";\t// IP地址\n  InetAddress ip = InetAddress.getByName(address); // getByName()方法获取IP对象\n  ```\n\n#### 2.2 端口\n\n- 端口(Port)表示计算机上的一个程序的进程，一个端口号对应一个进程\n\n- 端口号的范围：0~65535\n\n  - 公有端口：0~1023\n  - 程序注册端口：1024~49151\n  - 动态、私有端口：49152~65535\n\n- 端口查询命令\n\n  ```bash\n  netstat -ano\t# 查看所有的端口\n  netstat -ano|findstr \"8080\"\t# 查看指定的端口8080\n  tasklist|findstr \"8080\"\t# 查看指定端口8080对应的进程\n  ```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 3. 通信协议\n\n- 通信协议是指通信各方事先约定好的协议，用于计算机网络之间的通信\n- 两个重要的通信协议：<font color=red>TCP</font>和<font color=red>UDP</font>\n- TCP和UDP的对比：\n  - TCP：\n    - 需要连接，稳定\n    - 有”三次握手“和”四次挥手“\n    - 分为客户端和服务端\n    - 传输完成要释放连接，效率低\n  - UDP：\n    - 不需要连接，不稳定\n    - 分为发送端和接收端，没有明确的界限\n    - 不用建立连接就可以直接传输，效率高\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 4. 使用TCP\n\n- 使用TCP进行消息发送\n\n  - 服务端\n\n    ```java\n    import java.io.ByteArrayOutputStream;\n    import java.io.IOException;\n    import java.io.InputStream;\n    import java.net.ServerSocket;\n    import java.net.Socket;\n    \n    // TCP 服务端\n    public class TcpServerDemo01_Message {\n    \n        public static void main(String[] args) {\n    \n            int port = 9999;    // 服务器的端口号\n    \n            ServerSocket serverSocket = null;\n            Socket socket = null;\n            InputStream is = null;\n            ByteArrayOutputStream baos = null;\n    \n            try {\n    \n                // 创建一个服务的端口\n                serverSocket = new ServerSocket(port);\n    \n                // 监听Socket连接\n                socket = serverSocket.accept();\n    \n                // 读取客户端的信息\n                is = socket.getInputStream();\n    \n                // 管道流\n                baos = new ByteArrayOutputStream();\n                byte[] buffer = new byte[1024];\n                int len;\n                while((len=is.read(buffer))!=-1) {\n                    baos.write(buffer,0,len);\n                }\n                System.out.println(baos.toString());\n    \n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n    \n                if(baos!=null) {\n                    try {\n                        baos.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n    \n                if(is!=null) {\n                    try {\n                        is.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n    \n                if(socket!=null) {\n                    try {\n                        socket.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n    \n                if(serverSocket!=null) {\n                    try {\n                        serverSocket.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n    \n            }\n    \n        }\n    \n    }\n    ```\n\n  - 客户端\n\n    ```java\n    import java.io.IOException;\n    import java.io.OutputStream;\n    import java.net.InetAddress;\n    import java.net.Socket;\n    import java.net.UnknownHostException;\n    \n    // TCP 客户端\n    public class TcpClientDemo01_Message {\n    \n        public static void main(String[] args) {\n    \n            String address = \"127.0.0.1\";   // 服务器的地址（IP或域名）\n            int port = 9999;    // 服务器的端口号\n            String message = \"你好！\"; // 发送的消息\n    \n            InetAddress serverIP;\n            Socket socket = null;\n            OutputStream os = null;\n    \n            try {\n    \n                // 获取服务器地址的对象\n                serverIP = InetAddress.getByName(address);\n    \n                // 创建一个Socket连接\n                socket = new Socket(serverIP, port);\n    \n                // 通过IO流发送消息\n                os = socket.getOutputStream();\n                os.write(message.getBytes());\n    \n                // 通知服务端发送完成\n                socket.shutdownOutput();\n    \n            } catch (UnknownHostException e) {\n                e.printStackTrace();\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n    \n                if(os!=null) {\n                    try {\n                        os.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n    \n                if(socket!=null) {\n                    try {\n                        socket.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n    \n            }\n    \n    \n        }\n    \n    }\n    ```\n\n  - 先运行服务端，再运行客户端\n\n---\n\n- 使用TCP进行文件发送\n\n  - 服务端\n\n    ```java\n    import java.io.*;\n    import java.net.ServerSocket;\n    import java.net.Socket;\n    \n    // TCP 服务端\n    public class TcpServerDemo02_File {\n    \n        public static void main(String[] args) throws Exception {\n    \n            int port = 9090;    // 服务器端口\n            String filePath = \"receive.jpg\";    // 文件路径\n    \n            // 创建一个服务端口\n            ServerSocket serverSocket = new ServerSocket(port);\n    \n            // 监听Socket连接\n            Socket socket = serverSocket.accept();\n    \n            // 读取客户端传输文件\n            InputStream is = socket.getInputStream();\n    \n            // 文件流输出文件\n            FileOutputStream fos = new FileOutputStream(new File(filePath));\n            byte[] buffer = new byte[1024];\n            int len;\n            while((len=is.read(buffer))!=-1) {\n                fos.write(buffer,0,len);\n            }\n    \n            // 通知客户端接收完成\n            OutputStream os = socket.getOutputStream();\n            os.write(\"接收完成\".getBytes());\n    \n            //关闭资源\n            fos.close();\n            is.close();\n            socket.close();\n            serverSocket.close();\n    \n        }\n    \n    }\n    ```\n\n  - 客户端\n\n    ```java\n    import java.io.*;\n    import java.net.InetAddress;\n    import java.net.Socket;\n    \n    // TCP 客户端\n    public class TcpClientDemo02_File {\n    \n        public static void main(String[] args) throws Exception {\n    \n            String address = \"127.0.0.1\";  // 服务器地址（IP或域名）\n            int port = 9090;    // 服务器端口\n            String filePath = \"bilibili.jpg\";   // 文件路径\n    \n            // 获取服务器地址的对象\n            InetAddress serverIP = InetAddress.getByName(address);\n    \n            // 创建一个Socket连接\n            Socket socket = new Socket(serverIP, port);\n    \n            // 通过IO流发送文件\n            OutputStream os = socket.getOutputStream();\n    \n            // 文件流输入文件\n            FileInputStream fis = new FileInputStream(new File(filePath));\n            byte[] buffer = new byte[1024];\n            int len;\n            while((len=fis.read(buffer))!=-1) {\n                os.write(buffer,0,len);\n            }\n    \n            // 通知服务端发送完成\n            socket.shutdownOutput();\n    \n            // 获取服务端接收完成消息\n            InputStream is = socket.getInputStream();\n    \n            // 管道流\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            byte[] buffer2 = new byte[1024];\n            int len2;\n            while((len2=is.read(buffer2))!=-1) {\n                baos.write(buffer2,0,len2);\n            }\n            System.out.println(baos.toString());\n    \n            // 关闭资源\n            baos.close();\n            is.close();\n            fis.close();\n            os.close();\n            socket.close();\n    \n        }\n    \n    }\n    ```\n\n  - 先运行服务端，再运行客户端\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 5. 使用UDP\n\n- 使用UDP进行消息发送\n\n  - 接收方\n\n    ```java\n    import java.net.DatagramPacket;\n    import java.net.DatagramSocket;\n    \n    // UDP 接收方\n    public class UdpReceiverDemo01_Message {\n    \n        public static void main(String[] args) throws Exception {\n    \n            int port = 9090;    // 接收方的端口\n    \n            // 创建一个接收端口\n            DatagramSocket socket = new DatagramSocket(port);\n    \n            // 准备一个接收空数据包\n            byte[] data = new byte[1024];\n            DatagramPacket packet = new DatagramPacket(data, 0, data.length);\n    \n            // 接收数据包\n            socket.receive(packet);\n            System.out.println(\"发送方IP地址：\"+packet.getAddress().getHostAddress());\n            String message = new String(packet.getData(),0,packet.getLength());\n            System.out.println(\"信息：\"+message);\n    \n            // 关闭Socket\n            socket.close();\n    \n        }\n    \n    }\n    ```\n\n  - 发送方\n\n    ```java\n    import java.net.DatagramPacket;\n    import java.net.DatagramSocket;\n    import java.net.InetAddress;\n    \n    // UDP 发送方\n    public class UdpSenderDemo01_Message {\n    \n        public static void main(String[] args) throws Exception {\n    \n            String address = \"127.0.0.1\";   // 接收方的地址（IP或域名）\n            int port = 9090;    // 接收方的端口\n            String message = \"你好！\"; // 发送的信息\n    \n            // 创建一个Socket\n            DatagramSocket socket = new DatagramSocket();\n    \n            // 创建一个数据包\n            byte[] data = message.getBytes();\n            InetAddress receiverIP = InetAddress.getByName(address);\n            DatagramPacket packet = new DatagramPacket(data, 0, data.length, receiverIP, port);\n    \n            // 发送数据包\n            socket.send(packet);\n    \n            // 关闭Socket\n            socket.close();\n    \n        }\n    \n    }\n    ```\n\n  - 先运行接收方，再运行发送方\n\n---\n\n- 使用UDP和多线程实现聊天\n\n  - 接收类\n\n    ```java\n    import java.io.IOException;\n    import java.net.DatagramPacket;\n    import java.net.DatagramSocket;\n    import java.net.SocketException;\n    \n    // UDP 接收类\n    public class Receiver implements Runnable {\n    \n        private  String receiverName;   // 接收方的名字\n        private int port;   // 接收方的端口\n    \n        public Receiver(String receiverName, int port) {\n            this.receiverName = receiverName;\n            this.port = port;\n        }\n    \n        @Override\n        public void run() {\n    \n            DatagramSocket socket = null;\n    \n            try {\n    \n                // 创建一个接收端口\n                socket = new DatagramSocket(this.port);\n    \n                while (true) {\n    \n                    // 准备一个接收空数据包\n                    byte[] data = new byte[1024];\n                    DatagramPacket packet = new DatagramPacket(data, 0, data.length);\n    \n                    // 接收数据包\n                    socket.receive(packet);\n                    String message = new String(packet.getData(), 0, packet.getLength());\n                    System.out.println(message);\n    \n                    // 结束\n                    if(message.indexOf(\"bye\")!=-1) {\n                        break;\n                    }\n    \n                }\n    \n            } catch (SocketException e) {\n                e.printStackTrace();\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                socket.close();\n            }\n    \n        }\n    \n    }\n    ```\n\n  - 发送类\n\n    ```java\n    import java.io.*;\n    import java.net.*;\n    \n    // UDP 发送类\n    public class Sender implements Runnable {\n    \n        private  String senderName; // 发送方的名字\n        private String receiverIP;  // 接收方的IP\n        private int receiverPort;   // 接收方的端口\n    \n        public Sender(String senderName, String receiverIP, int receiverPort) {\n            this.senderName = senderName;\n            this.receiverIP = receiverIP;\n            this.receiverPort = receiverPort;\n        }\n    \n        @Override\n        public void run() {\n    \n            DatagramSocket socket = null;\n            InputStreamReader is = null;\n            BufferedReader reader = null;\n    \n            try {\n    \n                // 创建一个Socket\n                socket = new DatagramSocket();\n    \n                is = new InputStreamReader(System.in);\n                reader = new BufferedReader(is);\n    \n                while (true) {\n    \n                    // 创建一个数据包\n                    String data = reader.readLine();\n                    byte[] dataBytes = (this.senderName+\"：\"+data).getBytes();\n                    InetAddress receiverIP = InetAddress.getByName(this.receiverIP);\n                    DatagramPacket packet = new DatagramPacket(dataBytes, 0, dataBytes.length, receiverIP, this.receiverPort);\n    \n                    // 发送数据包\n                    socket.send(packet);\n    \n                    // 结束\n                    if(data.indexOf(\"bye\")!=-1) {\n                        break;\n                    }\n    \n                }\n    \n    \n            } catch (SocketException | UnknownHostException e) {\n                e.printStackTrace();\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n    \n                if(reader!=null) {\n                    try {\n                        reader.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n    \n                if(is!=null) {\n                    try {\n                        is.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n    \n                if(socket!=null) {\n                    socket.close();\n                }\n    \n            }\n    \n        }\n    \n    }\n    ```\n\n  - 客服\n\n    ```java\n    // 客服\n    public class Service {\n    \n        public static void main(String[] args) {\n    \n            new Thread(new Sender(\"客服\",\"127.0.0.1\",9091)).start();\n            new Thread(new Receiver(\"客服\",9090)).start();\n    \n        }\n    \n    }\n    ```\n\n  - 顾客\n\n    ```java\n    // 顾客\n    public class Customer {\n    \n        public static void main(String[] args) {\n    \n            new Thread(new Sender(\"顾客\",\"127.0.0.1\",9090)).start();\n            new Thread(new Receiver(\"顾客\",9091)).start();\n    \n        }\n    \n    }\n    ```\n\n  - 同时运行客服和顾客\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 6. URL\n\n- URL叫同一资源定位符，它用于定位网络上的某一个资源\n\n- URL由多个部分组成，其结构为：协议://IP地址(或域名):端口号/项目名/文件资源?get参数\n\n  ```java\n  import java.net.MalformedURLException;\n  import java.net.URL;\n  \n  public class URLDemo {\n  \n      public static void main(String[] args) throws MalformedURLException {\n  \n          String strURL = \"http://localhost:8080/Demo/index.html?name=admin&password=123\";    // url地址\n  \n          URL url = new URL(strURL);  // 创建url\n  \n          System.out.println(url.getProtocol());  // 协议\n          System.out.println(url.getHost());  // IP\n          System.out.println(url.getPort());  // 端口\n          System.out.println(url.getPath());  // 路径\n          System.out.println(url.getFile());  // 全路径\n          System.out.println(url.getQuery()); // 参数\n          \n          System.out.println(\"结束\");\n          \n          /*\n           结果：\n           http\n  \t\t localhost\n  \t\t 8080\n  \t\t /Demo/index.html\n  \t\t /Demo/index.html?name=admin&password=123\n  \t\t name=admin&password=123\n  \t\t 结束\n           */\n  \n      }\n  \n  }\n  ```\n\n- 使用URL下载\n\n  ```java\n  import java.io.File;\n  import java.io.FileOutputStream;\n  import java.io.IOException;\n  import java.io.InputStream;\n  import java.net.HttpURLConnection;\n  import java.net.URL;\n  \n  // 使用URL下载\n  public class URLDown {\n  \n      public static void main(String[] args) throws IOException {\n  \n          String strURL = \"https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/bd_logo1-66368c33f8.png\"; // url地址\n          String downFilePath = \"baidu.jpg\";   // 下载文件存放路径\n  \n          // 创建url\n          URL url = new URL(strURL);\n  \n          // 打开url资源流\n          HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n          InputStream is = urlConnection.getInputStream();\n  \n          // 接收\n          File downFile = new File(downFilePath);\n          FileOutputStream fos = new FileOutputStream(downFile);\n          byte[] buffer = new byte[1024];\n          int len;\n          while ((len=is.read(buffer))!=-1) {\n              fos.write(buffer,0,len);\n          }\n  \n          // 关闭资源\n          fos.close();\n          is.close();\n          urlConnection.disconnect();\n  \n      }\n  \n  }\n  ```","categoryId":"1","categoryName":"技术记录","tags":[{"id":"2","name":"Java"}],"views":1,"topping":false,"status":1,"createTime":"2022-10-24 20:49:19"}}