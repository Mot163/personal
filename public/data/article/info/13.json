{"code":0,"message":"获取文章简要信息成功!","data":{"id":"13","title":"Java静态代理模式","description":"Java静态代理模式","cover":"","content":"- 静态代理模式是23中常用设计模式之一的代理模式的一种，它可以帮助被代理的对象完成一些前期的准备工作和后期的善后工作，以此让被代理对象专心完成自己的核心工作\n- 静态代理模式由三个部分组成：\n  - 一个公共的接口\n  - 一个代理对象\n  - 一个被代理对象\n- 代码案例：\n\n```java\n// 接口 吃饭\ninterface HaveMeals {\n    void eat();\n}\n\n// 被代理者 人\nclass Person implements HaveMeals {\n\n    @Override\n    public void eat() {\n        System.out.println(\"进行吃饭...\");\n    }\n\n}\n\n// 代理者 饭店\nclass Restaurant implements HaveMeals {\n\n    private Person person;  // 被代理者\n\n    public Restaurant(Person person) {\n        this.person = person;\n    }\n\n    @Override\n    public void eat() {\n\n        System.out.println(\"提前做饭...\");\n        this.person.eat();\n        System.out.println(\"清理餐桌，收钱...\");\n\n    }\n\n}\n\n// 静态代理\npublic class StaticProxy {\n\n    public static void main(String[] args) {\n\n        // 实例化被代理对象\n        Person person = new Person();\n\n        // 实例化代理对象\n        Restaurant restaurant = new Restaurant(person);\n\n        // 调用代理对象的接口方法\n        restaurant.eat();\n\n        System.out.println(\"结束\");\n\n        /*\n         结果：\n         提前做饭...\n         进行吃饭...\n         清理餐桌，收钱...\n         结束\n         */\n\n    }\n\n}\n```","categoryId":"1","categoryName":"技术记录","tags":[{"id":"2","name":"Java"},{"id":"3","name":"设计模式"}],"views":2,"topping":false,"status":1,"createTime":"2022-10-24 20:53:48"}}