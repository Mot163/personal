{"code":0,"message":"获取文章简要信息成功!","data":{"id":"24","title":"Spring Cloud及其常用组件","description":"Spring Cloud及其常用组件","cover":"","content":"## Spring Cloud及其常用组件\n\n### 1. Spring Cloud简介\n\nSpring Cloud是实现分布式的一套微服务基础框架。它包含了一系列解决分布式问题的组件，主要有：服务发现注册中心、统一配置中心、消息总线、远程服务调用、负载均衡、网关、断路器、数据监控等。\n\n&nbsp;\n\n---\n\n&nbsp;\n\n### 2. 常用组件\n\n- 服务发现注册中心：eurekaserver、consul、<font style=\"color: red;\">nacos</font>\n- 统一配置中心：config、<font style=\"color: red;\">nacos</font>\n- 远程服务调用及负载均衡：<font style=\"color: red;\">rabbion & openfeign</font>\n- 网关：zuul、<font style=\"color: red;\">gateway</font>\n- 消息总线：bus\n- 断路器及数据监控：hystrix、<font style=\"color: red;\">sentinel</font>\n\n&nbsp;\n\n---\n\n&nbsp;\n\n### 3. Nacos\n\n#### 3.1 简介\n\n- Nacos是微服务架构中的服务发现注册中心及统一配置中心，为Spring Cloud Alibaba提供的组件。\n- Nacos名称由\"na\"和\"cos\"组成。其中，\"na\"表示Name Server(命名服务)，\"cos\"表示Configrations Server(配置服务)。\n\n---\n\n#### 3.2 安装Nacos（Linux下的安装）\n\n- 下载nacos\n\n```bash\nwget https://github.com/alibaba/nacos/releases/download/1.3.1/nacos-server-1.3.1.tar.gz\n或\ncurl -O https://github.com/alibaba/nacos/releases/download/1.3.1/nacos-server-1.3.1.tar.gz\n```\n\n- 在指定目录下解压\n\n```bash\nmv nacos-server-1.3.1.tar.gz /usr/local/\ntar -zxvf nacos-server-1.3.0.tar.gz\n```\n\n- 启动nacos服务\n\n```bash\n# 进入nacos的bin目录\ncd /usr/local/nacos/bin/\n\n# 启动nacos服务\n./startup.sh -m standalone\n```\n\n- 查看日志\n\n```bash\ntail -f /usr/local/nacos/logs/start.out\n```\n\n- 访问nacos的web管理界面：http://ip:8848/nacos\t（用户名及密码：nacos）\n\n---\n\n#### 3.3 Nacos发现注册中心服务\n\n##### 3.3.1 Spring Boot集成配置\n\n- pom.xml配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.mo</groupId>\n    <artifactId>nacos</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>nacos</name>\n    <description>Demo project for Spring Boot</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <spring-boot.version>2.2.5.RELEASE</spring-boot.version>\n        <!--springcloud alibaba版本-->\n        <spring.cloud.alibaba.version>2.2.1.RELEASE</spring.cloud.alibaba.version>\n    </properties>\n\n    <dependencies>\n\n        <!--web-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <!--引入nacos client依赖-->\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n        </dependency>\n\n        <!--监控检查依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n\n        <!--测试依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n    </dependencies>\n\n    <!--全局引用下载依赖地址，不会引入依赖-->\n    <dependencyManagement>\n        <dependencies>\n\n            <!--springcloud下载依赖-->\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-dependencies</artifactId>\n                <version>${spring-boot.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n\n            <!--springcloud alibaba下载依赖-->\n            <dependency>\n                <groupId>com.alibaba.cloud</groupId>\n                <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n                <version>${spring.cloud.alibaba.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.8.1</version>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <version>2.3.7.RELEASE</version>\n                <configuration>\n                    <mainClass>com.mo.NacosApplication</mainClass>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>repackage</id>\n                        <goals>\n                            <goal>repackage</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n\n- application.yaml配置\n\n```yaml\nserver:\n  port: 8100  # 服务端口\n\n\nspring:\n\n  application:\n    name: nacosclient01 # 服务名称\n\n  cloud:\n    nacos:\n      server-addr: 192.168.150.128:8848 # nacos服务器地址\n      discovery:\n        server-addr: ${spring.cloud.nacos.server-addr}  # 注册中心地址（默认为nacos服务器地址）\n\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"  # 暴露所有web端点（用于健康检查）\n```\n\n- NacosApplication.java启动类\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@SpringBootApplication\n@EnableDiscoveryClient  // 开启服务的注册与发现（新版本默认开启，可以不需要该注解）\npublic class NacosApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(NacosApplication.class, args);\n    }\n\n}\n```\n\n---\n\n##### 3.3.2 web端管理\n\n- 访问nacos的web管理界面：http://ip:8848/nacos\t（用户名及密码：nacos）\n- 服务管理 --> 服务列表\n\n---\n\n#### 3.4 Nacos统一配置中心服务\n\n##### 3.4.1 web端配置文件管理\n\n- 新建命名空间\n\n![命名空间](https://img-blog.csdnimg.cn/20210412223130153.png#pic_center)\n![新建命名空间](https://img-blog.csdnimg.cn/20210412223324129.png#pic_center)\n![新建生产环境](https://img-blog.csdnimg.cn/20210412223405467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpbmdKaW5fbW8=,size_16,color_FFFFFF,t_70#pic_center)\n- 新建配置文件\n![配置列表](https://img-blog.csdnimg.cn/20210412223457723.png#pic_center)\n![新建](https://img-blog.csdnimg.cn/20210412223530381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpbmdKaW5fbW8=,size_16,color_FFFFFF,t_70#pic_center)\n![新建配置文件](https://img-blog.csdnimg.cn/20210412223604383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpbmdKaW5fbW8=,size_16,color_FFFFFF,t_70#pic_center)\n![结果](https://img-blog.csdnimg.cn/20210412223630936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpbmdKaW5fbW8=,size_16,color_FFFFFF,t_70#pic_center)\n\n---\n\n##### 3.4.2 Spring Boot集成配置\n\n- pom.xml配置依赖\n\n```xml\n<!--引入nacos client依赖-->\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n</dependency>\n\n<!--监控检查依赖-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n\n<!--引入nacos config依赖-->\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n</dependency>\n```\n\n- bootstrap.yaml预启动配置文件\n\n```yaml\nspring:\n\n  application:\n    name: nacosclient # 服务名称（文件前缀名）\n\n  cloud:\n    nacos:\n      server-addr: 192.168.150.128:8848 # nacos服务器地址\n      config:\n        server-addr: ${spring.cloud.nacos.server-addr}  # 配置中心地址（默认为nacos服务器地址）\n        namespace: dc4c0654-8bdd-45c4-b382-9bc9c56c7471 # 命名空间ID（默认为public）\n        prefix: ${spring.application.name}  # 文件前缀名（默认为服务名称）\n        group: TEST_GROUP # 读取配置的分组（默认为DEFAULT_GROUP）\n        file-extension: yaml  # 读取文件的后缀名（注意：yaml不能简写为yml）\n\n  profiles:\n    active: prod  # 文件的环境名（指定后会在文件名后加\"-${环境名}\"，不指定则省略）\n```\n\n- 配置文件自动刷新\n\n  - nacos默认已经实现了自动刷新\n  - 使用自动刷新只需要在控制器上添加@RefreshScope注解\n\n  ```java\n  import org.springframework.beans.factory.annotation.Value;\n  import org.springframework.cloud.context.config.annotation.RefreshScope;\n  import org.springframework.web.bind.annotation.GetMapping;\n  import org.springframework.web.bind.annotation.RestController;\n  \n  @RestController\n  @RefreshScope   // 自动刷新配置标识注解\n  public class TestController {\n  \n      @Value(\"${myname}\") // 获取配置文件的值\n      private String myName;\n  \n      @GetMapping(\"/test/test\")\n      public String test() {\n          return myName;\n      }\n  \n  }\n  ```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n### 4. OpenFeign\n\n#### 4.1 简介\n\n- OpenFeign是一种声明式、模板化的伪HTTP客户端。在Spring Cloud中使用OpenFeign，可以做到使用HTTP请求访问远程服务，就像调用本地方法一样的，开发者完全感知不到这是在调用远程方法，更感知不到在访问HTTP请求。\n\n---\n\n#### 4.2 Spring Boot集成配置\n\n- pom.xml配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.5.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.mo</groupId>\n    <artifactId>openfeignclient1</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>openfeignclient1</name>\n    <description>Demo project for Spring Boot</description>\n    <properties>\n        <java.version>1.8</java.version>\n        <!--springcloud版本-->\n        <spring.cloud.version>Hoxton.SR6</spring.cloud.version>\n        <!--springcloud alibaba版本-->\n        <spring.cloud.alibaba.version>2.2.1.RELEASE</spring.cloud.alibaba.version>\n    </properties>\n    <dependencies>\n\n        <!--web 依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <!--引入nacos client依赖-->\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n        </dependency>\n\n        <!--监控检查依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n\n        <!--openfeign 依赖-->\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-openfeign</artifactId>\n        </dependency>\n\n        <!--测试依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n    </dependencies>\n\n    <!--全局引用下载依赖地址，不会引入依赖-->\n    <dependencyManagement>\n        <dependencies>\n\n            <!--springcloud下载依赖-->\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring.cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n\n            <!--springcloud alibaba下载依赖-->\n            <dependency>\n                <groupId>com.alibaba.cloud</groupId>\n                <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n                <version>${spring.cloud.alibaba.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n- application.yaml配置\n\n```yaml\nserver:\n  port: 8201  # 服务端口\n\nspring:\n\n  application:\n    name: openfeignclient1 # 服务名称\n\n  cloud:\n    nacos:\n      server-addr: 192.168.150.128:8848 # nacos服务器地址\n      discovery:\n        server-addr: ${spring.cloud.nacos.server-addr}  # 注册中心地址（默认为nacos服务器地址）\n\nfeign:\n  client:\n    config:\n\n      openfeignclient2:\n\n        connectTimeout: 5000  # openfeignclient2服务连接超时配置（微秒）\n        readTimeout: 5000 # openfeignclient2服务等待超时配置（微秒）\n\n        loggerLevel: full # 开启openfeignclient2服务日志展示\n\n#      default:\n#\n#        connectTimeout: 5000  # 所有服务连接超时配置（微秒）\n#        readTimeout: 5000 # 所有服务等待超时配置（微秒）\n#\n#        loggerLevel: full # 开启所有服务日志展示\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"  # 暴露所有web端点（用于健康检查）\n\nlogging:\n  level:\n    com.mo.openfeignclients: debug  # 指定openfeign客户端日志为debug级别（必须为debug级别 ）\n```\n\n- Openfeignclient1Application.java启动类\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@SpringBootApplication\n@EnableDiscoveryClient  // 开启服务的注册与发现（新版本默认开启，可以不需要该注解）\n@EnableFeignClients // 开启OpenFeign客户端\npublic class Openfeignclient1Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Openfeignclient1Application.class, args);\n    }\n\n}\n```\n\n- OpenfeignClient2.java客户端接口\n\n```java\nimport org.springframework.cloud.openfeign.FeignClient;\n\n@FeignClient(\"openfeignclient2\")    // 标识当前接口是一个feign组件，value为服务ID\npublic interface OpenfeignClient2 {\n\n}\n```\n\n---\n\n#### 4.3 OpenFeign使用案例\n\n- Person实体类\n\n```java\npublic class Person {\n\n    private String name;\n    private Integer age;\n\n    public Person() {\n    }\n\n    public Person(String name, Integer age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n\n}\n```\n\n- api提供方测试控制器\n\n```java\nimport com.mo.dao.Person;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\n\n@RestController\npublic class TestController {\n\n    @GetMapping(\"/test/getname\")\n    public String getName() {\n        return \"张三\";\n    }\n\n    @GetMapping(\"/test/print\")\n    public String print(@RequestParam(\"content\") String content) {\n        return content;\n    }\n\n    @PostMapping(\"/test/print2\")\n    public String print2(@RequestParam(\"content\") String content) {\n        return content;\n    }\n\n    @PostMapping(\"/test/personinfo\")\n    public String personInfo(@RequestBody Person person) {\n        return person.toString();\n    }\n\n    @PostMapping(value = \"/test/uploadfile\")\n    public String uploadFile(@RequestPart(\"file\") MultipartFile file) {\n        return file.getOriginalFilename();\n    }\n\n}\n```\n\n- api调用方OpenFeign客户端接口\n\n```java\nimport com.mo.dao.Person;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\n\n@FeignClient(\"openfeignclient2\")    // 标识当前接口是一个feign组件，value为服务ID\npublic interface OpenfeignClient2 {\n\n    @GetMapping(\"/test/getname\")\n    String getName();\n\n    /**\n     * get传参时@RequestParam注解必须存在\n     */\n    @GetMapping(\"/test/print\")\n    String print(@RequestParam(\"content\") String content);\n\n    /**\n     * post传一个参数时@RequestParam注解必须存在\n     */\n    @PostMapping(\"/test/print2\")\n    String print2(@RequestParam(\"content\") String content);\n\n    /**\n     * post传一个对象时@RequestBody注解必须存在\n     */\n    @PostMapping(\"/test/personinfo\")\n    String personInfo(@RequestBody Person person);\n\n    /**\n     * 传递文件时@RequestPart注解必须存在\n     * 传递文件时需在映射中加上consumes = MediaType.MULTIPART_FORM_DATA_VALUE\n     */\n    @PostMapping(value = \"/test/uploadfile\", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\n    String uploadFile(@RequestPart(\"file\") MultipartFile file);\n\n}\n```\n\n- api调用方测试控制器\n\n```java\nimport com.mo.dao.Person;\nimport com.mo.openfeignclients.OpenfeignClient2;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\n\n@RestController\npublic class TestController {\n\n    @Autowired\n    private OpenfeignClient2 openfeignClient2;\n\n    @GetMapping(\"/test/testgetname\")\n    public String testGetName() {\n        return openfeignClient2.getName();\n    }\n\n    @GetMapping(\"/test/testprint\")\n    public String testPrint(@RequestParam(\"content\") String content) {\n        return openfeignClient2.print(content);\n    }\n\n    @GetMapping(\"/test/testprint2\")\n    public String testPrint2(@RequestParam(\"content\") String content) {\n        return openfeignClient2.print2(content);\n    }\n\n    @GetMapping(\"/test/testpersoninfo\")\n    public String testPersonInfo() {\n\n        Person person = new Person();\n        person.setName(\"张三\");\n        person.setAge(20);\n\n        return openfeignClient2.personInfo(person);\n    }\n\n    @PostMapping(value = \"/test/testuploadfile\")\n    public String testUploadFile(MultipartFile file) {\n        return file.getOriginalFilename();\n    }\n\n}\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n### 5. Gateway\n\n#### 5.1 简介\n\n- Gateway是Spring Cloud官方推出的 API 网关框架，用于取代之前的Zuul网关。网关在微服务系统中有着非常作用，常见的有路由转发、权限校验、限流控制等功能。\n\n---\n\n#### 5.2 Spring Boot集成配置\n\n- pom.xml配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.5.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.mo</groupId>\n    <artifactId>gateway</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>gateway</name>\n    <description>Demo project for Spring Boot</description>\n    <properties>\n        <java.version>1.8</java.version>\n        <!--springcloud版本-->\n        <spring.cloud.version>Hoxton.SR6</spring.cloud.version>\n        <!--springcloud alibaba版本-->\n        <spring.cloud.alibaba.version>2.2.1.RELEASE</spring.cloud.alibaba.version>\n    </properties>\n    <dependencies>\n\n        <!--引入nacos client依赖-->\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n        </dependency>\n\n        <!--监控检查依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n\n        <!--引入gateway依赖-->\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-gateway</artifactId>\n        </dependency>\n\n        <!--测试依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n    </dependencies>\n\n    <!--全局引用下载依赖地址，不会引入依赖-->\n    <dependencyManagement>\n        <dependencies>\n\n            <!--springcloud下载依赖-->\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring.cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n\n            <!--springcloud alibaba下载依赖-->\n            <dependency>\n                <groupId>com.alibaba.cloud</groupId>\n                <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n                <version>${spring.cloud.alibaba.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n- application.yaml配置\n\n```yaml\nserver:\n  port: 8300  # 服务端口\n\nspring:\n\n  application:\n    name: gateway # 服务名称\n\n  cloud:\n\n    nacos:\n      server-addr: 192.168.150.128:8848 # nacos服务器地址\n      discovery:\n        server-addr: ${spring.cloud.nacos.server-addr}  # 注册中心地址（默认为nacos服务器地址）\n\n    gateway:\n      routes:\n        - id: routes1  # 指定路由唯一标识\n          #uri: http://localhost:8201/ # 指定路由服务的地址\n          uri: lb://client1 # 使用负载均衡策略，client1为服务ID\n          predicates:\n            - Path=/client1/**  # 指定路由匹配规则\n#            - After=2021-04-10T10:30:30.544+08:00[Asia/Shanghai]  # 指定时间之后才能访问\n#            - Before=2021-04-10T10:30:30.544+08:00[Asia/Shanghai]  # 指定时间之前才能访问\n#            - Between=2021-04-10T10:30:30.544+08:00[Asia/Shanghai], 2021-04-10T11:30:30.544+08:00[Asia/Shanghai]  # 指定时间之间才能访问\n#            - Cookie=username,chen  # 带指定cookie值（可用正则表达式）才能访问\n#            - Header=H-Request-Id, \\d+  # 指定请求值（可用正则表达式）才能访问\n#            - Method=GET,POST  # 指定请求方式才能访问\n\n#          filters:\n#            - AddRequestHeader=H-Request-red, blue  # 在所有请求的请求头中添加H-Request-red: blue\n#            - AddRequestParameter=id,1  # 在所有请求的请求参数中添加id=1\n\n        - id: routes2\n          #uri: http://localhost:8202/\n          uri: lb://client2\n          predicates:\n            - Path=/client2/**\n      discovery:\n        locator:\n          enabled: true # 开启根据服务名动态获取路由地址\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"  # 暴露所有web端点（用于健康检查）\n```\n\n- 自定义过滤器\n\n```java\nimport org.springframework.cloud.gateway.filter.GatewayFilterChain;\nimport org.springframework.cloud.gateway.filter.GlobalFilter;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.Ordered;\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.web.server.ServerWebExchange;\nimport reactor.core.publisher.Mono;\n\n/**\n * 自定义过滤器\n */\n@Configuration\npublic class CustomFilter implements GlobalFilter, Ordered {\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n\n        System.out.println(\"过滤操作\");\n\n        ServerHttpRequest request = exchange.getRequest();  // 获取request\n        MultiValueMap<String, String> queryParams = request.getQueryParams();   // 获取请求参数\n        if (queryParams.get(\"username\") != null) {\n            return chain.filter(exchange);  // 路由转发\n        }\n\n        return exchange.getResponse().setComplete();    // 过滤返回\n    }\n\n    @Override\n    public int getOrder() { // 获取Filter的优先值，值越小越优先\n        return -1;  // -1表示该过滤器最先执行\n    }\n\n}\n```\n\n- GatewayApplication.java启动类\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@SpringBootApplication\n@EnableDiscoveryClient  // 开启服务的注册与发现（新版本默认开启，可以不需要该注解）\npublic class GatewayApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n\n}\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n### 6. Sentinel\n\n#### 6.1 简介\n\n- Sentinel 是面向分布式服务架构的高可用流量防护组件，主要以流量为切入点，从限流、流量整形、熔断降级、系统负载保护、热点防护等多个维度来帮助开发者保障微服务的稳定性。\n\n- 特性：\n\n  - **丰富的应用场景**：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。\n  - **完备的实时监控**：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。\n  - **广泛的开源生态**：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。\n  - **完善的 SPI 扩展点**：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。\n![特性](https://img-blog.csdnimg.cn/20210412223715165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpbmdKaW5fbW8=,size_16,color_FFFFFF,t_70#pic_center)\n\n---\n\n#### 6.2 安装Sentinel Dashboard\n\n- 下载\n\n```bash\nwget https://github.com/alibaba/Sentinel/releases/download/1.7.2/sentinel-dashboard-1.7.2.jar\n或\ncurl -O https://github.com/alibaba/Sentinel/releases/download/1.7.2/sentinel-dashboard-1.7.2.jar\n```\n\n- 启动（需提前安装java1.8+环境）\n\n```bash\n# 使用java -jar命令直接启动，默认端口为8080，-Dserver.port=8850将端口改为8850\njava -Dserver.port=8850 -jar sentinel-dashboard-1.7.2.jar\n```\n\n- 访问Sentinel Dashboard的web管理界面：http://ip:8850/\t（用户名及密码：sentinel）\n- Sentinel Dashboard的操作详见：[Sentinel介绍](https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D)\n\n---\n\n#### 6.3 Spring Boot集成配置\n\n- pom.xml配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.5.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.mo</groupId>\n    <artifactId>sentinel</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>sentinel</name>\n    <description>Demo project for Spring Boot</description>\n    <properties>\n        <java.version>1.8</java.version>\n        <!--springcloud alibaba版本-->\n        <spring.cloud.alibaba.version>2.2.1.RELEASE</spring.cloud.alibaba.version>\n    </properties>\n    <dependencies>\n\n        <!--web 依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <!--引入nacos client依赖-->\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n        </dependency>\n\n        <!--监控检查依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n\n        <!--Sentinel依赖-->\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>\n        </dependency>\n\n        <!--测试依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n    </dependencies>\n\n    <!--全局引用下载依赖地址，不会引入依赖-->\n    <dependencyManagement>\n        <dependencies>\n\n            <!--springcloud alibaba下载依赖-->\n            <dependency>\n                <groupId>com.alibaba.cloud</groupId>\n                <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n                <version>${spring.cloud.alibaba.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n- application.yaml配置\n\n```yaml\nserver:\n  port: 8849  # 服务端口\n\nspring:\n\n  application:\n    name: sentinel # 服务名称\n\n  cloud:\n\n    nacos:\n      server-addr: 192.168.150.128:8848 # nacos服务器地址\n      discovery:\n        server-addr: ${spring.cloud.nacos.server-addr}  # 注册中心地址（默认为nacos服务器地址）\n\n    sentinel:\n      enabled: true # 开启sentinel（默认开启）\n      transport:\n        dashboard: 192.168.150.128:8850 # 连接dashboard\n        port: 8719  # 与dashboard的通信端口\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"  # 暴露所有web端点（用于健康检查）\n```\n\n- SentinelApplication.java启动类\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@SpringBootApplication\n@EnableDiscoveryClient  // 开启服务的注册与发现（新版本默认开启，可以不需要该注解）\npublic class SentinelApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SentinelApplication.class, args);\n    }\n\n}\n```\n\n---\n\n#### 6.4 @SentinelResource注解的使用\n\n```java\nimport com.alibaba.csp.sentinel.annotation.SentinelResource;\nimport com.alibaba.csp.sentinel.slots.block.BlockException;\nimport com.alibaba.csp.sentinel.slots.block.degrade.DegradeException;\nimport com.alibaba.csp.sentinel.slots.block.flow.FlowException;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class TestController {\n\n\n    /**\n     * 注解@SentinelResource参数：\n     *      value: 操作资源名（可自定义）\n     *      fallback: 抛除降级/流控之类的异常时的自定义处理函数（自定义函数需在同一类中）\n     *      blockHandler: 抛降级/流控之类的异常的自定义处理函数（自定义函数需在同一类中）\n     */\n    @SentinelResource(value = \"test\", fallback = \"testFallBack\", blockHandler = \"testBlockHandler\")\n    @GetMapping(\"/test/test\")\n    public String test() {\n        if (Math.random() > 0.5) {\n            throw new RuntimeException(\"服务器出错\");\n        }\n        return \"1111\";\n    }\n\n    public String testFallBack() {\n        return \"服务器出错\";\n    }\n\n    public String testBlockHandler(BlockException blockException) {\n        if (blockException instanceof FlowException) {\n            return \"当前服务已被限流\";\n        } else if (blockException instanceof DegradeException) {\n            return \"当前服务已被降级\";\n        }\n        return \"当前服务不可用\";\n    }\n\n}\n```","categoryId":"1","categoryName":"技术记录","tags":[{"id":"2","name":"Java"},{"id":"13","name":"Spring Cloud"}],"views":36,"topping":false,"status":1,"createTime":"2022-10-24 21:05:47"}}