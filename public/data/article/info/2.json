{"code":0,"message":"获取文章简要信息成功!","data":{"id":"2","title":"Java基础语法","description":"Java基础语法","cover":"","content":"## 1. 注释\n\n#### 1.1 单行注释\n\n语法：在需要注释的内容前添加“//”\n\n```java\n    // 这是注释的内容\n```\n\n#### 1.2 多行注释\n\n语法：在需要注释的内容其前添加“/\\*”，其后添加“\\*/”\n\n```java\n    /* \n        这是注释的内容1\n        这是注释的内容2\n        这是注释的内容3\n    */\n```\n\n#### 1.3 文档注释\n\n语法：在需要注释的内容其前添加“/\\*\\*”，其后添加“\\*/”，并在每行之前添加“*”\n\n```java\n    /**\n     *\n     * @author：作者。\n     * @version：版本。\n     * @docroot：表示产生文档的根路径。\n     * @deprecated：不推荐使用的方法。\n     * @param：方法的参数类型。\n     * @return：方法的返回类型。\n     * @see：用于指定参考的内容。\n     * @exception：抛出的异常。\n     * @throws：抛出的异常，和exception同义\n     *\n     */\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n\n## 2. 标识符和关键字\n\n#### 2.1 认识标识符和关键字\n\n- 标识符：在Java中，类名、变量名以及方法名都被称为标识符\n\n- 关键字：在Java中，Java语言提前预定义的具有特殊意义的标识符为关键字，常见关键字如下：\n\n  | <font color=blue>abstract</font>       | <font color=blue>assert</font>           | <font color=blue>boolean</font>       | break                                  | <font color=blue>byte</font>       |\n  | -------------------------------------- | ---------------------------------------- | ------------------------------------- | -------------------------------------- | ---------------------------------- |\n  | **case**                               | **<font color=blue>catch</font>**        | **<font color=blue>char</font>**      | **<font color=blue>class</font>**      | **const**                          |\n  | **continue**                           | **<font color=blue>default</font>**      | **<font color=blue>do</font>**        | **<font color=blue>double</font>**     | **<font color=blue>else</font>**   |\n  | **<font color=blue>enum</font>**       | **<font color=blue>extends</font>**      | **<font color=blue>final</font>**     | **<font color=blue>finally</font>**    | **float**                          |\n  | **<font color=blue>for</font>**        | **goto**                                 | **<font color=blue>if</font>**        | **<font color=blue>implements</font>** | **<font color=blue>import</font>** |\n  | **<font color=blue>instanceof</font>** | **<font color=blue>int</font>**          | **<font color=blue>interface</font>** | **long**                               | **native**                         |\n  | **new**                                | **<font color=blue>package</font>**      | **<font color=blue>private</font>**   | **<font color=blue>protected</font>**  | **<font color=blue>public</font>** |\n  | **<font color=blue>return</font>**     | **<font color=blue>strictfp</font>**     | **<font color=blue>short</font>**     | **<font color=blue>static</font>**     | **<font color=blue>super</font>**  |\n  | **<font color=blue>switch</font>**     | **<font color=blue>synchronized</font>** | **<font color=blue>this</font>**      | **<font color=blue>throw</font>**      | **throws**                         |\n  | **<font color=blue>transient</font>**  | **try**                                  | **<font color=blue>void</font>**      | **<font color=blue>volatile</font>**   | **<font color=blue>while</font>**  |\n\n#### 2.2 标识符的注意点\n\n- 所有标识符应以字母(A-Za-z)、美元符号($)或下划线(_)开头\n- 从第二位开始可以是字母(A-Za-z)、美元符号($)、下划线(_)或数字的自由组合\n- <font color=red>**不能使用关键字作为变量名或方法名**</font>\n- <font color=red>**标识符大小写敏感**</font>\n- 合法标识符举例：name, $num1, _bank\n- 不合法标识符举例：123, #age, *red\n- ~~可以使用中文作为标识符，但不推荐~~\n\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 3. 数据类型\n\n#### 3.1 数据类型的分类\n\n数据类型分为两大类：<font color=red>基本数据类型（primitive type）</font>和<font color=red>引用数据类型（reference type）</font>，其中基本数据类型分为<font color=red>数值类型</font>、<font color=red>字符类型</font>和<font color=red>boolean类型</font>，而数值类型又细分为<font color=red>整数类型</font>、<font color=red>浮点数类型</font>和<font color=red>字符类型</font>。整数类型包括<font color=red>byte</font>、<font color=red>short</font>、<font color=red>int</font>和<font color=red>long</font>，浮点数类型包括<font color=red>float</font>和<font color=red>double</font>，字符类型只有<font color=red>char</font>，boolean类型只有<font color=red>boolean</font>。引用类型分三类：<font color=red>类</font>、<font color=red>接口</font>和<font color=red>数组</font>。\n\n![1](https://img-blog.csdnimg.cn/20200814145630744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpbmdKaW5fbW8=,size_16,color_FFFFFF,t_70#pic_center)\n\n\n#### 3.2 基本数据类型\n\n###### 3.2.1 数值类型\n\n- 整数类型\n\n  - byte，占1个字节，范围：-128~127\n\n    ```java\n    //byte变量的定义\n    byte byteNumber = 10;\n    ```\n\n  - short，占2个字节，范围：-32768~32767\n\n    ```java\n    //short变量的定义\n    short shortNumber = 2000;\n    ```\n\n  - int，占4个字节，范围：-2147483648~2147483647（最常用）\n\n    ```java\n    //int变量的定义\n    int intNumber = 40000;\n    ```\n\n  - long，占8个字节，范围：-9223372036854775808~9223372036854775807\n\n    ```java\n    //long变量的定义\n    long longNumber = 3000000000L;\t//注意在数字后面加上L\n    ```\n\n- 浮点数类型\n\n  **<font color=red>浮点数是有限的、离散的，其具有舍入误差，不适合进行高精度的比较。若要进行浮点数比较用BigDecimal数学工具类</font>**\n\n  - float，占4个字节\n\n    ```java\n    //float变量的定义\n    float floatNumber = 888.88888F;\t//注意在数字后面加上F\n    ```\n\n  - double，占8个字节（最常用）\n\n    ```java\n    //double变量的定义\n    double doubleNumber = 888.88888;\n    ```\n\n- 常用进制表示\n\n  - 二进制\n\n    ```java\n    //前缀0b表示二进制\n    int num = 0b10101100; //0b10101100相当于十进制的172\n    ```\n\n  - 八进制\n\n    ```java\n    //前缀0表示八进制\n    int num = 0254; //0254相当于十进制的172\n    ```\n\n  - 十六进制\n\n    ```java\n    //前缀0x表示十六进制\n    int num = 0xAC; //0xAC相当于十进制的172\n    ```\n\n###### 3.2.2 字符类型\n\n- char，占两个字节\n\n  ```java\n  //char变量的定义\n  char charName = 'A';\n  ```\n\n- 转义字符，具有特殊意义的字符\n\n  - \\a 响铃(BEL) 007\n  - \\b 退格(BS) 008\n  - \\f 换页(FF) 012\n  - \\n 换行(LF) 010\n  - \\r 回车(CR) 013\n  - \\t 水平制表(HT) 009\n  - \\v 垂直制表(VT) 011\n  - \\\\\\\\ 反斜杠 092\n  - \\? 问号字符 063\n  - \\\\' 单引号字符 039\n  - \\\\\" 双引号字符 034\n  - \\0 空字符(NULL) 000\n\n  ```java\n  System.out.println(\"Hello\\tWorld!\");\t//输出Hello\tWorld!\n  System.out.println(\"Hello\\nWorld!\");\t/* 输出：Hello\n  \t\t\t\t\t\t\t\t\t\t\t    World! */\n  ```\n\n###### 3.2.3 boolean类型\n\n- boolean，占一位，其值只有true和false两个\n\n  ```java\n  //boolean变量的定义\n  boolean flag = true;\n  ```\n\n#### 3.3 引用数据类型\n\n- 类，class\n- 接口，interface\n- 数组，[]\n\n\n\n#### 3.4 类型转换\n\n类型转换有两种：**自动类型转换**和**强制类型转换**\n\n###### 3.4.1 自动类型转换\n\n- 自动类型转换遵循低到高的原则：byet,short,char-->int-->long-->float-->double\n- 在运算中，不同类型的数据先转换为高字节占位的同一类型，然后运算\n- <font color=red>byte、short、char之间的运算都先转换为int再运算</font>\n- <font color=red>在运算中，运算结果超出当前类型范围时会造成内存溢出</font>\n\n```java\n//自动转换\nbyte num1 = 10;\nshort num2 = num1;\nint num3 = num2;\nlong num4 = num3;\nfloat num5 = num4;\ndouble num6 = num5;\n\n//short num7 = num1 + num2; (错)\nint num7 = num1 + num2;\t//(对)\n\nint num8 = 2000000000;\n//int num9 = num8*20; (错)\nlong num9 = num8*20;\t//(对)\n```\n\n###### 3.4.2 强制类型转换\n\n- 转换格式：**(类型)变量名**\n\n- 不能把不相关的类型进行转换\n\n- <font color=red>不能对boolean值进行转换</font>\n\n- <font color=red>由高到低强制转换可能存在内存溢出或精度问题</font>\n\n```java\n//强制转换\nshort num1 = 10;\nbyte num2 = (byte)num1;\ndouble num3 = (double)num2;\n\n//char与int互相转换(字符类型本质为字符表中的字符序号)\nchar charNum1 = 'A';\nint num4 = (int)charNum; //num4的值为65\nint num5 = 66;\nchar charNum2 = (char)num5;\t//charNum2的值为'B'\n\n//int num6 = (int)true; (错)\n\ndouble num7 = 49.9;\nint num8 = (int)num7;\t//num8值为49\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 4. 变量、常量、作用域\n\n#### 4.1 变量\n\n- 变量是程序中最基本的单元，其没有固定值，可以变化\n- 在使用变量之前都必须预先定义，定义格式：**数据类型 变量名 = 值**\n- 变量必须有数据类型，可以是基本数据类型或引用类型\n- 变量名必须是合法的标识符\n\n```java\n//定义变量\n//int a=1,b=2,c=3; 可以写在一行，但不推荐\nint num = 100;\t//基本数据类型\nString str = new String(\"Hello\");\t//引用类型\n```\n\n#### 4.2 常量\n\n- 常量是初始化赋值后就不能改变的量，值始终不变\n- 常量可以看成是一种特殊的变量，它的值设定后就不允许改变\n- 常量名一般用大写字符加下划线\n\n```java\n//常量的定义 final 常量名 = 值\nfinal double PI = 3.14159265;\n```\n\n#### 4.3 变量的作用域\n\n- 类变量（全局变量、静态变量）\n- 实例变量（成员变量）\n- 局部变量\n\n```java\npublic class Demo {\n    \n    static int staticNum = 0;\t//类变量，作用于全局\n    int oNum;\t//实例变量，默认值为0，作用于类的实例化对象\n    \n\tpublic static void main(String[] args) {\n\t\t\n\t\tint num = 66;\t//局部变量，必须初始化值，作用于前后'{}'之内\n        \n\t}\n}\n```\n\n#### 4.4 变量的命名规范\n\n- 所有变量、方法、类名要<font color=red>见名知意</font>\n- 类成员变量（属性）、局部变量、方法名：首字母小写驼峰原则：除了第一个单词的首字母小写以外，后面的单词首字母一律大写，例如：myBook\n- 常量：大写字母加下划线，例如：MAX_VALUE\n- 类名：首字母大写驼峰原则，例如：RedBook\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 5. 运算符\n\njava语言支持以下运算符：\n\n- 算术运算符：+，-，*，/，%，++，--                          （返回值为运算结果）\n- 赋值运算符：=，+=，-=，*=，/=                                 （将后面的值赋予前面的变量）\n- 关系运算符：>，<，>=，<=，==，!=，instanceof     （返回值为true或false）\n- 逻辑运算符：&&，||，!                                                （返回值为true或false）\n- 位运算符：&，|，^，~，>>，<<，>>>                       （了解）\n- 条件运算符：? :                                                           （根据条件判断返回冒号前或后的值）\n\n```java\n/*************算术运算符*************/\n\nint num1 = 2 + 3;\t// +为加，num1值为5\n\nint num2 = 3 - 2;\t// -为减，num2值为1\n\nint num3 = 2 * 3;\t// *为乘，num3值为6\n\nint num4 = 3 / 2;\t// /为除，num4值为1\n\ndouble num5 = 3 / (double)2;\t// /为除，num5值为1.5\n\nint num6 = 5 % 3;\t// %为取余，num6值为2\n\nint num7 = 5;\nnum7++;\t// ++为自增1，num7值为6（也可以写成++num7，++在前先进行自增运算，++在后后进行自增运算）\n\nint num8 = 5;\nnum8--;\t// --为自减1，num8值为4（也可以写成--num8，--在前先进行自增运算，--在后后进行自增运算）\n\n//要进行幂运算可使用Math数学工具类\nSystem.out.println(Math.pow(2,3));\t//Math.pow(2,3)为2的3次方，输出8\n\n/*************赋值运算符*************/\n\nint num9 = 5;\t// =为赋值符号，将5赋值给num9，num9的值为5\n\nint num9 += 1;\t// +=为加赋值符号，相当于num9 = num9 + 1，num9的值为6\n\nint num9 -= 1;\t// -=为加赋值符号，相当于num9 = num9 - 1，num9的值为5\n\nint num9 *= 2;\t// *=为乘赋值符号，相当于num9 = num9 * 2，num9的值为10\n\nint num9 /= 2;\t// /=为加赋值符号，相当于num9 = num9 / 2，num9的值为5\n\n\n/*************关系运算符*************/\n\nboolean flag1 = (2 > 3);\t// >为大于比较符号，flag1的值为false\n\nboolean flag2 = (2 < 3);\t// <为小于比较符号，flag2的值为true\n\nboolean flag3 = (2 >= 3);\t// >=为大于等于比较符号，flag3的值为false\n\nboolean flag4 = (2 <= 3);\t// <=为小于比较符号，flag4的值为true\n\nboolean flag5 = (2 == 3);\t// ==为等于比较符号，flag5的值为false\n\nboolean flag6 = (2 != 3);\t// !=为不等于比较符号，flag6的值为true\n\nInteger num10 = 1;\t//Integer为int的包装类\nboolean flag7 = (num10 instanceof Integer);\n// instanceof为判断前面的对象是否属于后面的类，flag7的值为true\n\n\n/*************逻辑运算符*************/\n\nboolean flag8 = (true && false);\n/* &&为短路与符号，&&左右都为true时返回true，只要遇见一个false结果就返回false并不再执行后面的判断，flag8的值为false */\n\nboolean flag9 = (true || false);\n/* ||为短路或符号，||左右都为false时返回false，只要遇见一个true结果就返回true并不再执行后面的判断，flag9的值为true */\n\nboolean flag10 = !true;\t// !为非符号，将!后面的结果取反，flag10的值为false\n\n\n/*************位运算符*************/\n\nSystem.out.println(0b1100 & 0b1010);\t// &为按位与运算符，输出8，即0b1000\n\nSystem.out.println(0b1100 | 0b1010);\t// &为按位或运算符，输出13，即0b1110\n\nSystem.out.println(0b1100 ^ 0b1010);\t// &为按位异或运算符，输出6，即0b0110\n\nSystem.out.println(~ 0b1010);\t// ~为按位取反运算符，输出-11，即-0b0101\n\nSystem.out.println(0b0010 >> 1);\t// >>为右移运算符，输出1，即0b0001\n\nSystem.out.println(0b0010 << 1);\t// <<为左移运算符，输出1，即0b0100\n\nSystem.out.println(0b0010 >>> 1);\t// >>>为无符号右移运算符，输出1，即0b0001\n\n\n/*************条件运算符*************/\n\nSystem.out.println((2 > 3) ? 1 : 0);\n// ?:为条件判断运算符，当?前为true则返回:前的值，否则返回:后的值，输出0\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 6. 包机制\n\n- 为了更好的组织类，Java提供的包机制，用于区别类名的命名空间\n- 包语句的语法格式：package pkg1[.pkg2[.pkg3…]]\n- 一般用公司的域名倒置作为包名，例如：com.baidu.www\n- 要使用其他包的成员，需要用“import”语句导入包，格式：\n\n```java\npackage pkg1[.pkg2[.pkg3…]].(classname|*);\n```","categoryId":"1","categoryName":"技术记录","tags":[{"id":"2","name":"Java"}],"views":3,"topping":false,"status":1,"createTime":"2022-10-24 20:37:54"}}