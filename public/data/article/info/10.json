{"code":0,"message":"获取文章简要信息成功!","data":{"id":"10","title":"Java注解","description":"Java注解","cover":"","content":"## 1. 概述\n\n- 注解也叫元数据，它是一种代码级别的说明。\n- 注解使用方式：@注解名\n- 注解和注释不同。注释是只是给人看的，它不参与到程序。而注解既是给人看的，也是给程序看的，它要参与到程序。\n- 注解可以通过反射机制被访问。\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 2. 三种内置注解\n\n- 在Java中有三种内置的注解：<font color=red>@Override</font>、<font color=red>@Deprecated</font>和<font color=red>@SuppressWarnings</font>\n\n  - @Override 重写的注解，表示该方法为重写方法\n  - @Deprecated 方法废弃的注解，表示该方法已经过时或存在问题，不推荐程序员使用\n  - @SuppressWarnings 抑制编译器警告的注解，其需要至少一个表示要抑制的警告的值\n\n  ```java\n  // 三种内置注解\n  public class AnnotationDemo01 {\n  \n      // @Override 重写的注解，表示该方法为重写方法\n      @Override\n      public String toString() {\n          return  \"被重写了~~~\";\n      }\n  \n      // @Deprecated 方法废弃的注解，表示该方法已经过时或存在问题，不推荐程序员使用\n      @Deprecated\n      public void testDeprecated() {\n          System.out.println(\"该方法已经被废弃~~~\");\n      }\n  \n      // @SuppressWarnings 抑制编译器警告的注解，其需要至少一个表示要抑制的警告的值\n      @SuppressWarnings(\"unused\")\n      public void testSuppressWarnings() {\n          Object o = new Object();    // 加上@SuppressWarnings注解后，编译器不会提示对象未使用\n      }\n  \n      public static void main(String[] args) {\n  \n          AnnotationDemo01 annotationDemo01 = new AnnotationDemo01();\n  \n          System.out.println(annotationDemo01.toString());\n          annotationDemo01.testDeprecated();  // 方法仍然可以调用，但调用时会在方法上显示横线划去\n  \n          /*\n          结果：\n          被重写了~~~\n          该方法已经被废弃~~~\n           */\n  \n      }\n  \n  }\n  ```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 3. 四种元注解和自定义注解\n\n- 元注解是负责注解其他注解的注解，Java中定义了<font color=red>@Target</font>、<font color=red>@Retention</font>、<font color=red>@Documented</font>和<font color=red>@Inherited</font>四种\n\n  - @Target()：描述注解的使用范围，范围取决于括号内的值，一般的值有：ElementType.TYPE(类、接口、枚举)、ElementType.METHOD(方法)、ElementType.FIELD(属性)...\n  - @Retention()：描述注解的生命周期，生命周期取决于括号内的值，该值有三个：RetentionPolicy.SOURCE、RetentionPolicy.CLASS和RetentionPolicy.RUNTIME，一般值取RetentionPolicy.RUNTIME（生命周期：RUNTIME>CLASS>SOURCE）\n  - @Documented：表示注解将被包含在JavaDoc文档中\n  - @Inherited ：表示子类可以继承父类的该注解\n\n- 通过元注解可以自定义注解，自定义注解的格式：<font color=red>public @interface 注解名 { 类型 参数名();... }</font>\n\n- <font color=red>自定义注解可以定义的类型只能为：基本数据类型，枚举类型，Class，String</font>\n\n- 自定义注解中的参数可以使用<font color=red>default</font>来声明参数的默认值，一般为空字符串、0\n\n- 自定义注解如果只有一个参数，一般参数名为value（参数名为value时，使用注解可以将“@注解名(value = 值)”简化为“@注解名(值)”）\n\n  ```java\n  import java.lang.annotation.*;\n  \n  // 四种元注解 用于注解其他注解的注解\n  @Target(ElementType.TYPE) // 描述注解的使用范围，范围取决于括号内的值\n  @Retention(RetentionPolicy.RUNTIME)   // 描述注解的生命周期，生命周期取决于括号内的值\n  @Documented // 表示注解将被包含在JavaDoc文档中\n  @Inherited  // 表示子类可以继承父类的该注解\n  public @interface AnnotationDemo02 {\n  \n      // 自定义值\n      String value(); // 字符串\n      String name() default \"\";   // 带默认值的字符串\n      int age() default 0;    // 带默认值的基本数据类型int\n      double[] array();   // 基本数据类型double\n      Class aClass(); // Class类型\n      TestEnum aEnum();   // 枚举类型\n  \n  }\n  \n  enum TestEnum {\n      RED,\n      BLUE,\n      GREEN\n  }\n  ```","categoryId":"1","categoryName":"技术记录","tags":[{"id":"2","name":"Java"}],"views":1,"topping":false,"status":1,"createTime":"2022-10-24 20:51:34"}}