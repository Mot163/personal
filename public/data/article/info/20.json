{"code":0,"message":"获取文章简要信息成功!","data":{"id":"20","title":"JavaScript基础","description":"JavaScript基础","cover":"","content":"## 1. 认识JavaScript\n\n- JavaScript是一种可以在浏览器上运行的<font color=red>解释性编程脚本语言</font>，它可以操作浏览器，给HTML网页增加动态功能\n- JavaScript有一个标准为<font color=red>ECMAScript</font>，目前ECMAScript的最新版本为ES6，但有些浏览器还只支持ES5\n- 一般在ES6环境进行开发，上线则需要转换为ES5\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 2. JavaScript的引入\n\n- 内部引入：直接在script标签内写JavaScript代码\n- 外部引入：通过script标签引入外部的JavaScript代码\n- <font color=red>注意：script标签不能自闭和，必须成对出现</font>\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>JavaScript引入</title>\n\n    <!-- 内部引入：直接在script标签内写JavaScript代码 -->\n    <script>\n        alert(\"Hello!\");\n    </script>\n\n    <!-- 外部引入：通过script标签引入外部的JavaScript代码，注意：script标签不能自闭和，必须成对出现 -->\n    <script src=\"js/hello.js\"></script>\n\n</head>\n<body>\n\n</body>\n</html>\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 3. 注释\n\n#### 3.1 单行注释\n\n语法：在需要注释的内容前添加“//”\n\n```JavaScript\n// 这是注释的内容\n```\n\n---\n\n#### 3.2 多行注释\n\n语法：在需要注释了内容前添加“/*”，其后添加“\\*/”\n\n```javascript\n/*\n\t这是注释的内容1\n\t这是注释的内容2\n\t这是注释的内容3\n*/\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 4. 数据类型\n\n- JavaScript有8种数据类型，分别为：\n  - <font color=red>string</font>：字符串，使用单引号或双引号包裹\n  - <font color=red>number</font>：数字\n    - NaN（Not a Number）是数字类型，表示不是一个数字\n      - NaN与任何数字及NaN本身比较都为false\n      - 只能用isNaN()函数进行判断NaN\n    - 数字中的浮点数（小数）存在精度问题，一般不建议用于运算或比较\n  - <font color=red>boolean</font>：布尔（true或false）\n  - <font color=red>null</font>：空\n  - <font color=red>undefined</font>：未定义\n  - <font color=red>symbol</font>：独一无二\n  - <font color=red>object</font>：对象\n  - <font color=red>function</font>：函数\n\n```javascript\n// string字符串\ntypeof '123';\t// typeof '123'表示'123'的类型\ntypeof \"123\";\n\n// number数字\ntypeof 123;\ntypeof NaN;\n\n// boolean布尔\ntypeof true;\n\n// null空\nvar str = null;\ntypeof str;\n\n// undefined未定义\ntypeof str1; // 不声明str1则str1为未定义\n\n// symbol独一无二\ntypeof Symbol(\"symbol\");\n\n// object对象\ntypeof [];\t// []代表数组\ntypeof {};\t// {}代表对象\n\n// function函数\ntypeof function(){};\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 5. 变量、常量、作用域\n\n#### 5.1 变量\n\n- JavaScript中所有类型的变量都可以用<font color=red>var</font>关键字来声明\n\n- 当变量在局部使用时，推荐使用<font color=red>let</font>关键字来声明\n\n- 变量在命名时一般遵循首字母小写驼峰原则\n\n  ```javascript\n  // 声明变量\n  var val;\n  \n  // 声明局部变量\n  let val2;\n  ```\n\n- 所有全局变量默认绑定在window下\n\n  ```javascript\n  var val = 'hello';\n  console.log(val);   // 结果：hello\n  console.log(window.val);    // 结果：hello\n  ```\n\n- 引入多个js文件时可能产生全局变量名冲突，因此有以下规范：\n  <font color=red>每个js文件里只能拥有一个全局变量，其它变量都绑定在该变量下</font>\n\n  ```javascript\n  var OnlyOne = {};\t// 定义唯一的全局变量\n  var OnlyOne.str = 'hello';\t// 定义变量\n  var OnlyOne.fun = function() {};\t// 定义函数\n  ```\n\n---\n\n#### 5.2 常量\n\n- JavaScript中所有的类型的常量都可以用<font color=red>const</font>关键字来声明\n\n- 常量一般使用大写字母加下划线来命名\n\n  ```javascript\n  // 声明常量\n  const PI = 3.14159265;\n  ```\n\n---\n\n#### 5.3 作用域\n\n- 声明在最外层的变量为全局变量，其作用域为全局\n\n- 声明在函数、方法、控制结构等局部块内的变量为局部变量，其作用域为变量所声明的局部块内\n\n- <font color=red>外部不能访问函数的变量</font>\n\n- <font color=red>内部函数可以访问外部函数的变量</font>\n\n- <font color=red>外部函数不能访问内部函数的变量</font>\n\n- <font color=red>内部变量与外部变量重名时，内部变量会覆盖（屏蔽）外部变量</font>\n\n  ```javascript\n  function test() {\n      var x = 1;\n      var x2 = 2;\n  \n      function test2() {\n          var y = x + 1;  // 内部函数可以访问外部函数的变量\n          var x2 = 3; // 内部变量与外部变量重名时，内部变量会覆盖（屏蔽）外部变量\n          console.log(x2); // 结果：3\n      }\n  \n      var z = y + 1;  // 外部函数不能访问内部函数的变量\n  }\n  \n  x = 2;  // 外部不能访问函数的变量\n  ```\n\n- JavaScript会自动提升变量的作用域（将所有的var声明提到最前面）\n\n- 声明规范：<font color=red>将要使用的变量提前在最前面声明</font>\n\n  ```javascript\n  var x = 'x' + y;\n  console.log(x); // 结果：xundefined\n  var y = 'y';\n  \n  /*\n  上面的代码等同于：\n  var x;\n  var y;\n  x = 'x' + y;\n  console.log(x);\n  y = 'y';\n  */\n  ```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 6. 流程控制\n\n#### 6.1 顺序结构\n\n- 正常情况下，程序中的语句都是按顺序从上到下执行\n\n  ```javascript\n  console.log(\"输出第一条语句\"); // console.log为控制台输出语句\n  console.log(\"输出第二条语句\");\n  console.log(\"输出第三条语句\");\n  ```\n\n---\n\n#### 6.2 选择结构\n\n- 选择结构是根据条件判断之后再做处理的一种语法结构，使程序运行更加灵活\n\n- 执行方式：根据判断条件选择要执行的语句分支\n\n  ```javascript\n  // if单选结构\n  if(2>1) {\n      console.log(\"2>1\");\n  }\n  /*\n  结果：2>1\n  */\n  \n  // if-else双选结构\n  if(2<1) {\n      console.log(\"2<1\");\n  }else {\n      console.log(\"2>1\");\n  }\n  /*\n  结果：2>1\n  */\n  \n  // if-else-if多选结构\n  if(2===1) {\n      console.log(\"2=1\");\n  }else if(2>1) {\n      console.log(\"2>1\");\n  }else {\n      console.log(\"2<1\");\n  }\n  /*\n  结果：2>1\n  */\n  \n  // switch多选结构\n  switch (0) {\n      case 0:\n          console.log(\"0\");\n          break;\n      case 1:\n          console.log(\"1\");\n          break;\n      case 2:\n          console.log(\"2\");\n          break;\n      default:\n          console.log(\"other\");\n  }\n  /*\n  结果：0\n  */\n  ```\n\n---\n\n#### 6.3 循环结构\n\n- 循环结构用于执行具有重复性的工作，让代码编写更简便\n\n- 执行方式：根据条件判断执行重复的语句\n\n  ```javascript\n  let i;\n  \n  // while循环\n  i = 0;\n  while (i<2) {\n      console.log(\"i\");\n      i++;\n  }\n  /*\n  结果：0\n  \t 1\n  */\n  \n  \n  // do-while循环，至少执行一次\n  i = 0;\n  do {\n      console.log(\"i\");\n      i++\n  }while (i<0);\n  /*\n  结果：0\n  */\n  \n  \n  // for循环\n  for (let j = 0; j < 5; j++) {\n      console.log(\"j\");\n  }\n  /*\n  结果：0\n  \t 1\n  \t 2\n  \t 3\n  \t 4\n  */\n  \n  \n  let arr = [1,2,3,4,5,6];\n  \n  // for-in循环，可以遍历数组\n  for (let k in arr) {\n      console.log(arr[k]);\n  }\n  /*\n  结果：1\n  \t 2\n  \t 3\n  \t 4\n  \t 5\n  \t 6\n  */\n  \n  \n  // foreach循环，可以遍历数组，ES5.1增加\n  arr.forEach(function (value) {\n      console.log(value);\n  })\n  /*\n  结果：1\n  \t 2\n  \t 3\n  \t 4\n  \t 5\n  \t 6\n  */\n  \n  \n  // for-of循环，可以遍历数组，ES6增加\n  for (let number of arr) {\n      console.log(number);\n  }\n  /*\n  结果：1\n  \t 2\n  \t 3\n  \t 4\n  \t 5\n  \t 6\n  */\n  ```\n\n---\n\n#### 6.4 break\n\n- break用于任何循环语句以及switch多选结构中，其功能为结束循环语句或switch多选结构，即不执行循环体或switch多选结构剩余的语句\n\n  ```javascript\n  let num = 100;\n  \n  for(let i=0;i<num;i++) {\n      console.log(i);\n      if(i==5) {\n          break;\n      }\n  }\n  /*\n  输出结果：0\n          1\n          2\n          3\n          4\n          5\n  */\n  ```\n\n---\n\n#### 6.5 continue\n\n- continue用于循环语句，其功能为结束当次循环，即跳过当次循环进行下一次循环\n\n  ```javascript\n  let num = 10;\n          \n  for(let i=0;i<num;i++) {\n      if(i%2===0) {\n          continue;\n      }\n      console.log(i);\n  }\n  /*\n  输出结果：1\n          3\n          5\n          7\n          9\n  */\n  ```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 7. 字符串\n\n- 字符串用于存储和处理文本\n- 字符串不可变\n\n```javascript\n// 字符串使用单引号或双引号包裹\nlet str1 = 'Hello';\nlet str2 = \"Hello\";\n\n// 转义字符\nlet str3 = '\\'';\nlet str4 = '\\n';\nlet str5 = '\\t';\nlet str6 = '\\u4e2d';    // Unicode字符“中”\nlet str7 = '\\x41';    // Ascll字符\n\n// 多行字符串\nlet str8 = `hello\n\t\t\tworld`;\n// 模板字符串\nlet str9 = `msg:${str8}`;\n\n// 获取字符串长度\nconsole.log(str9.length);\n\n// 获取字符串中的字符\nconsole.log(str9[0]);\n\n// 字符串大小写转换\nconsole.log(str9.toUpperCase());\nconsole.log(str9.toLowerCase());\n\n// 字符串获取指定字符下标\nconsole.log(str9.indexOf('l'));\n\n// 字符串截取子串\nconsole.log(str9.substring(1, 3));\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 8. 数组\n\n- 数组能够在一个变量内存储多个值\n- JavaScript中的数组存储的值可以为任意值，但一般推荐存储同一类型的值\n\n```javascript\n// 数组可以包含任意数据类型\nvar arr = [1,2.2,\"hello\"];  //通过下标取值和赋值\n\n// 获取数组长度（数组长度可变）\nconsole.log(arr.length);\n\n// 改变数组长度 arr.length = 改变的长度（改变的长度比原来小则丢失数据，反之增加几个undefined）\narr.length = 5;\n\n// 通过元素获得下标索引\nconsole.log(arr.indexOf(2.2));\n\n// 截取数组\nlet newArr = arr.slice(1,3);\n\n// 添加元素到数组末尾\nconsole.log(arr.push(3, 4));\n\n// 获取数组末尾元素\nconsole.log(arr.pop());\n\n// 添加元素到数组开头\nconsole.log(arr.unshift(5, 6));\n\n// 获取数组开头元素\nconsole.log(arr.shift());\n\n// 数组排序\nconsole.log(newArr.sort());\n\n// 数组反转\nconsole.log(arr.reverse());\n\n// 数组拼接（只是返回新数组，不改变原数组）\nconsole.log(arr.concat(newArr));\n\n// 自定义字符串打印拼接数组\nconsole.log(arr.join(\"-\"));\n\n// 多维数组\nlet arr2 = [[1,2],[3,4],[5,6]];\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 9. 函数\n\n#### 6.1 定义与调用函数\n\n- 函数是完成某个特定功能的一组语句\n\n- 函数定义的格式为：function 函数名(参数列表) {语句...}  或  var 函数名=function(参数列表) {语句...}\n\n- 函数名在命名时一般遵循首字母小写驼峰原则\n\n- 函数通过“函数名(参数列表)”来调用\n\n  ```javascript\n  // 定义绝对值函数\n  function abs(x) {\n      if(typeof x !== 'number') {   // typeof x表示x的类型\n          throw \"Not a Number\";   // 手动抛出异常\n      }\n      if(x>=0) {\n          return x;\n      }else {\n          return -x;\n      }\n  }\n  \n  // 或\n  \n  var abs2 = function(x) {\n      if(typeof x !== 'number') {   // typeof x表示x的类型\n          throw \"Not a Number\";   // 手动抛出异常\n      }\n      if(x>=0) {\n          return x;\n      }else {\n          return -x;\n      }\n  }\n  \n  // 调用\n  console.log(abs(-9));\t// console.log()为通过控制台输出函数，结果：9\n  ```\n\n---\n\n#### 6.2 arguments参数列表数组\n\n- JavaScript中在调用函数时可以传递超出定义个数的参数，但只取传递参数列表中定义个数的参数\n\n- JavaScript中在调用需要参数的函数时可以不传参数，一般返回undefined或NaN\n\n- 在函数体中可以通过<font color=red>arguments</font>获取传入参数列表数组\n\n  ```javascript\n  function print(a) {\n      console.log(a);\n      // 循环打印arguments数组的元素\n      for (let argument of arguments) {\n          console.log(argument);\n      }\n  }\n  \n  print(1,2,3,4,5);\n  /*\n  结果：\n  1\n  1\n  2\n  3\n  4\n  5\n  */\n  \n  print();\t// 结果：undefined\n  ```\n\n---\n\n#### 6.3 rest多余参数列表数组\n\n- 在函数体中可以通过<font color=red>rest</font>获取传入的除了函数定义需要的参数个数之外的参数列表的数组\n\n- rest参数只能写在参数列表最后面并用\"...\"表示\n\n  ```javascript\n  // ES6引入新特性rest\n  function print(a,b,...rest) {\n      console.log(a);\n      console.log(b);\n      for (let restElement of rest) {\n          console.log(restElement);\n      }\n  }\n  \n  print(1,2,3,4)\n  /*\n  结果：\n  1\n  2\n  3\n  4\n  */\n  ```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 10. 对象\n\n- JavaScript中的所有事物都是对象，对象包括属性和方法\n- 定义对象格式：\n  var 对象名 = {\n      属性名:属性值,\n      ...\n  }\n- 对象的属性名类型为字符串，属性值为任意数据类型\n\n```javascript\n// 定义\nvar person = {\n    name:\"张三\",\n    age:20,\n    sex:'男'\n}\n\n// 获取对象属性\nconsole.log(person.name);\nconsole.log(person['name']);\n// person.id 不会报错，返回undefined\n\n// 对象赋值 对象.属性名 = 属性值\nperson.age = 18;\n\n// 动态添加属性 对象.新的属性名 = 属性值\nperson.id = 1001;\nconsole.log(person);\n\n// 动态删减属性  delete 对象.属性名\ndelete person.id;\nconsole.log(person);\n\n// 判断属性是否在对象中\nconsole.log('name' in person);\nconsole.log('toString' in person);  // 返回值为true，toString为person继承的方法\n\n// 判断属性是否是对象自身拥有的\nconsole.log(person.hasOwnProperty('toString'));  // 返回值为false\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 11. Map和Set\n\n- Map是用于存储键值对的集合\n- Map的键名是唯一的\n- Set是无序不重复的集合\n- Map和Set都可以用for-of循环遍历\n\n```javascript\n/*********Map*********/\n\n// 定义Map\nvar map = new Map([[\"张三\",18],[\"李四\",19]]);\n\n// 通过键获取map中的值\nconsole.log(map.get(\"张三\"));\n\n// 添加或修改键值到map\nmap.set(\"王五\",20);   // 添加\nmap.set(\"张三\",20);   // 修改\n\n// 从map中删除键值\nmap.delete(\"王五\");\n\n\n/*********Set*********/\n\n// 定义Set（无序不重复集合）\nvar set = new Set([1,2,3,3,3]);\n\n// 添加值到set中\nset.add(4);\n\n// 从set中删除值\nset.delete(3);\n\n// 判断set是否包含某个元素\nconsole.log(set.has(3));\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 12. Date\n\n- Date是JavaScript中常用的时间对象\n\n```javascript\n// Date时间对象\nvar date = new Date();  // 获取当前时间对象\nconsole.log(date.getFullYear());    // 年\nconsole.log(date.getMonth());   // 月 0~11\nconsole.log(date.getDate());    // 日\nconsole.log(date.getDay());     // 星期几\nconsole.log(date.getHours());   // 小时\nconsole.log(date.getMinutes()); // 分钟\nconsole.log(date.getSeconds()); // 秒\n\nconsole.log(date.getTime());    // 时间戳 全世界同一 从柏林1970.01.01 00:00:00到现在的毫秒数\n\n// 通过时间戳获取时间对象\nvar date2 = new Date(1578216530021);\nconsole.log(date2.toLocaleString());    // 转换为本地时间\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 13. JSON\n\n- JSON全称JavaScript Object Notation（JavaScript 对象简谱)），是一种轻量级的数据交换格式\n- JSON对象是JavaScript中常用的数据处理对象\n\n```javascript\nvar person = {\n    name: \"张三\",\n    age: 18,\n    sex: \"男\"\n}\n\n// 将对象转换为JSON字符串\nvar jsonStr = JSON.stringify(person);\nconsole.log(jsonStr);\n\n// 将JSON字符串转换为对象\nvar obj = JSON.parse(jsonStr);\nconsole.log(obj);\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 14. 严格检测模式strict\n\n- 虽然JavaScript的代码编写非常的灵活，但是也变得过于随意，可读性比较差。为了使代码能变得规范，在JavaScript中可以加上严格检测模式<font color=red>strict</font>进行代码检测\n- 引入严格检测模式需要添加语句：'use strict';\n- 严格检测模式添加语句必须在代码开头的第一行\n\n```javascript\n'use strict'; // 使用严格检测模式strict,必须在第一行\n\n// 定义全局变量会报错\ni = 1;\n```","categoryId":"1","categoryName":"技术记录","tags":[{"id":"8","name":"JavaScript"}],"views":2,"topping":false,"status":1,"createTime":"2022-10-24 21:00:36"}}