{"code":0,"message":"获取文章简要信息成功!","data":{"id":"17","title":"数据结构：稀疏数组","description":"数据结构：稀疏数组","cover":"","content":"- 稀疏数组是用来对普通数组进行压缩存储的一种数组，其适用于普通数组元素0比较多的情况\n- 稀疏数组存储方式：\n  - 第一行为被存储<font color=red>数组的大小(行数和列数)</font>和<font color=red>不为0的元素个数</font>\n  - 从第二起，每行为被存储数组不为0的元素的<font color=red>坐标(第几行和第几列)</font>和<font color=red>值</font>\n\n- 例子：\n\n  ![1](https://img-blog.csdnimg.cn/202008161420035.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpbmdKaW5fbW8=,size_16,color_FFFFFF,t_70#pic_center)\n\n\n- Java代码：\n\n```java\npublic class Demo {\n    \n    public static void main(String[] args) {\n        \n        //初始化数组\n        int[][] arrays = {{0,0,0,1,0,0,0,0,0},\n                          {0,0,0,0,0,0,0,0,0},\n                          {0,0,0,0,2,0,0,0,0},\n                          {0,0,0,0,0,0,0,0,0},\n                          {0,0,0,0,0,0,0,3,0},\n                          {0,0,4,0,0,0,0,0,0}};\n        \n        //获取数组不为0元素个数\n        int count = 0;\n        for(int[] array : arrays) {\n\t\t\tfor(int arrNum : array) {\n\t\t\t\tif(arrNum != 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n        }\n\t\t\n        //初始化稀疏数组\n        int[][] sparseArray = new int[count+1][3];\n\n        //稀疏数组赋值\n        sparseArray[0][0] = arrays.length;\n        sparseArray[0][1] = arrays[0].length;\n        sparseArray[0][2] = count;\n\t\t\n\t\tint cnt = 1;\n        for(int i=0;i<arrays.length;i++) {\n            for(int j=0;j<arrays[i].length;j++){\n                if(arrays[i][j] != 0) {\n                    sparseArray[cnt][0] = i;\n                    sparseArray[cnt][1] = j;\n                    sparseArray[cnt++][2] = arrays[i][j];\n                }\n            }\n        }\n        \n        //打印稀疏数组\n        for(int[] sparseArr : sparseArray) {\n\t\t\tfor(int sparseArrNum : sparseArr) {\n\t\t\t\tSystem.out.print(sparseArrNum+\" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n        \n        System.out.println(\"结束\");\n        \n        /*\n        结果：\n        6 9 4 \n        0 3 1 \n        2 4 2 \n        4 7 3 \n        5 2 4\n        结束\n         */\n        \n    }\n    \n}\n```\n\n","categoryId":"1","categoryName":"技术记录","tags":[{"id":"2","name":"Java"},{"id":"5","name":"数据结构"}],"views":1,"topping":false,"status":1,"createTime":"2022-10-24 20:57:57"}}