{"code":0,"message":"获取文章简要信息成功!","data":{"id":"4","title":"Java方法","description":"Java方法","cover":"","content":"## 1. 概念\n\n- Java方法是语句的集合，是解决一类问题的步骤的有序集合，其包含于类或对象中\n- 设计方法的原则：<font color=red>一个方法完成一个功能，即保持方法的原子性</font>\n- 方法的命名规则：首字母小写驼峰命名原则\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 2. 方法的定义与调用\n\n- Java方法包含一个方法头和一个方法体，其定义结构如下：\n\n  ```java\n  修饰符 返回值类型 方法名([参数类型1 形式参数名1[,参数类型2 形式参数名2[,...]]]) {\n      ...\n      方法体\n      ...\n      [return 返回值;]\n  }\n  ```\n\n  - <font color=red>修饰符</font>：可选，定义方法的访问类型\n  - <font color=red>返回值类型</font>：必填，若有return返回，则填return返回值的类型，否则填void\n  - <font color=red>方法名</font>：方法的实际名称，遵循首字母小写驼峰命名原则\n  - <font color=red>参数类型</font>：方法所使用传入参数的参数类型，其参数在定义时为**形式参数**，方法调用时填入的为**实际参数**\n  - <font color=red>方法体</font>：实现功能语句的集合\n\n- 方法调用：对象名.方法名(实参列表)\n\n- 方法具有返回值时可被当作一个值使用\n\n```java\npublic class Demo {\n    \n\tpublic static void main(String[] args) {\n\n        Demo demo = new Demo();\n        int sum = demo.add(2,3);\n        System.out.println(sum);\n        \n\t\tSystem.out.println(\"结束\");\n        \n        /*\n         结果：\n         5\n         结束\n         */\n        \n\t}\n    \n    //加法\n    public int add(int num1, int num2) {\n        return num1 + num2;\n    }\n    \n}\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 3. 方法的重载\n\n- Java方法的重载就是在一个类中，定义多个名字相同，形参不同的方法\n- <font color=red>方法重载的规则：</font>\n  - <font color=red>方法名称必须相同</font>\n  - <font color=red>参数列表不同（参数个数不同，或参数类型不同，或参数排列顺序不同等）</font>\n  - <font color=red>方法的返回值可以相同也可以不同</font>\n  - <font color=red>仅仅返回值不同不能构成重载</font>\n\n```java\npublic class Demo {\n    \n\tpublic static void main(String[] args) {\n\n        Demo demo = new Demo();\n        int sum1 = demo.add(2,3);\n        double sum2 = demo.add(2.2,3.3);\n        int sum3 = demo.add(2,3,4);\n        System.out.println(sum1);\n        System.out.println(sum2);\n        System.out.println(sum3);\n        \n\t\tSystem.out.println(\"结束\");\n        \n        /*\n         结果：\n         5\n         5.5\n         9\n         结束\n         */\n        \n\t}\n    \n    //加法\n    public int add(int num1, int num2) {\n        return num1 + num2;\n    }\n    public double add(double num1, double num2) {\n        return num1 + num2;\n    }\n    public int add(int num1, int num2, int num3) {\n        return num1 + num2 + num3;\n    }\n    \n}\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 4. 不定项参数\n\n- 在Java中定义一个方法时，如果不确定同一类型参数的个数可以用不定项参数\n- <font color=red>不定项参数的规则：一个方法只能有一个不定项参数，并且必须为最后一个参数</font>\n- 不定项参数声明方法：在参数类型后加上(...)\n\n```java\npublic class Demo {\n    \n\tpublic static void main(String[] args) {\n\n        Demo demo = new Demo();\n        demo.outValue(1,2,2.2);\n        \n\t\tSystem.out.println(\"结束\");\n        \n        /*\n         结果：\n         1\n         2\n         2.2\n         结束\n         */\n        \n\t}\n    \n    //输出参数列表的值\n    public void outValue(double... nums) {\n        \n        for(int i;i<nums.length;i++) {\n            System.out.println(nums[i]);\n        }\n        \n    }\n    \n}\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 5. 递归\n\n- 递归方法就是在方法中调用自己的方法\n- 递归方法包含两部分：\n  - <font color=red>递归头：递归方法的结束限制条件，防止递归陷入死循环</font>\n  - 递归体：调用自身方法的结构\n\n```java\npublic class Demo {\n    \n\tpublic static void main(String[] args) {\n\n        Demo demo = new Demo();\n        int num = demo.factorial(5);\n        System.out.println(num);\n        \n\t\tSystem.out.println(\"结束\");\n        \n        /*\n         结果：\n         120\n         结束\n         */\n        \n\t}\n    \n    //计算阶乘\n    public int factorial(int n) {\n        \n        //递归头\n        if(n<=1) {\n            return 1;\n        }\n        \n        //递归体\n        return n*factorial(n-1);\n        \n    }\n    \n}\n```","categoryId":"1","categoryName":"技术记录","tags":[{"id":"2","name":"Java"}],"views":1,"topping":false,"status":1,"createTime":"2022-10-24 20:46:02"}}