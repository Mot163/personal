{"code":0,"message":"获取文章简要信息成功!","data":{"id":"7","title":"Java异常","description":"Java异常","cover":"","content":"## 1. 什么是异常\n\n- 异常指的是程序在运行中遇到的会打断程序运行的事件\n- 异常会中断正在执行的程序的正常指令流\n- 异常需要处理后才能继续执行\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 2. 异常的分类\n\n- 在Java中，异常有一个超类<font color=red>Throwable</font>，Throwable下分为两大类：<font color=red>Error</font>和<font color=red>Exception</font>，其中Exception又分为两类：<font color=red>检查异常CheckedException</font>和<font color=red>运行时异常RuntimeException</font>\n\n- Error是错误，它不是异常，它已经脱离了程序员的控制。错误通常在代码中忽略。\n\n- 检查异常CheckedException是编程时编译器要求必须处理的异常\n\n- 运行时异常RuntimeException是程序运行的时候出现的异常\n\n- 异常具体如下图所示：\n\n  ![1](https://img-blog.csdnimg.cn/20200817192515691.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpbmdKaW5fbW8=,size_16,color_FFFFFF,t_70#pic_center)\n\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 3. 异常处理\n\n#### 3.1 throw、throws抛出异常（不处理）\n\n- 当我们知道一个方法可能出现<font color=red>不确定</font>的异常时又不想处理时可以用<font color=red>throws</font>关键字抛出异常\n\n  ```java\n  public class Demo {\n  \n      // 除法\n      public double div(double a, double b) throws Exception {\n          return a / b;\n      }\n  \n  }\n  ```\n\n- 当我们知道一个方法可能出现<font color=red>确定</font>的异常时又不想处理时可以用<font color=red>throw</font>关键字抛出异常\n\n  ```java\n  public class Demo {\n  \n      // 除法，可能出现除数为零的异常\n      public double div(double a, double b) throws Exception {\n          if(b == 0) {\n              throw new ArithmeticException();\n          }\n          return a / b;\n      }\n  \n  }\n  ```\n\n#### 3.2 try-catch-finally捕获异常（处理异常）\n\n- 当我们知道一个方法可能出现异常时又不想处理时可以用<font color=red>try-catch-finally</font>捕获异常并处理\n\n- try为监视捕获异常，必须有\n\n- catch为处理异常，可以有多个，并且捕获范围从小到大排序，必须有\n\n- finally为善后处理，不管有没有异常都执行，可以不写\n\n  ```java\n  public class Demo {\n  \n      public static void main(String[] args) {\n  \n          try {\n              \n              double num = 1 / 0;\n              \n          }catch(ArithmeticException e) {\t//捕获除数为零的异常\n              System.out.println(\"ArithmeticException\");\n          }catch(Exception e) {\t//捕获除数为零之外的异常\n          \tSystem.out.println(\"Exception\");\n          }finally {\n              System.out.println(\"结束\");\n          }\n  \n          /*\n           结果：\n           ArithmeticException\n           结束\n           */\n  \n      }\n  \n  }\n  ```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 4. 自定义异常\n\n- 自定义异常需要定义一个类，该类需要继承Exception类，并且需要手动抛出\n\n```java\n// 自定义年龄异常\nclass AgeException extends Exception {\n    \n    // 接收的变量\n    private int detail;\n    \n    public AgeException(int detail) {\n        this.detail = detail;\n    }\n    \n    // 异常信息\n    @Override\n    public String toString() {\n        return \"年龄错误：\" + this.detail;\n    }\n    \n}\n\npublic class Demo {\n\n    public static void main(String[] args) throws Exception {\n\n        int age = 999;\n        \n        // 抛出异常\n        if(age<0||age>120) {\n            throw new AgeException(age);\n        }\n        \n        System.out.println(\"结束\");\n\n        /*\n         结果：\n         年龄错误：999\n         结束\n         */\n\n    }\n\n}\n```","categoryId":"1","categoryName":"技术记录","tags":[{"id":"2","name":"Java"}],"views":2,"topping":false,"status":1,"createTime":"2022-10-24 20:48:42"}}