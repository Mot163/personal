{"code":0,"message":"获取文章简要信息成功!","data":{"id":"23","title":"ElasticSearcher的部署和使用","description":"ElasticSearcher的部署和使用","cover":"","content":"## ElasticSearcher的部署和使用\n\n### 1.ElasticSearcher的部署\n\n#### 1.1 CentOS7.x下的直接部署\n\n- 安装java环境（jdk1.8+）\n\n```bash\n# 下在jdk1.8的包\nwget https://repo.huaweicloud.com/java/jdk/8u202-b08/jdk-8u202-linux-x64.tar.gz\n或\ncurl -O https://repo.huaweicloud.com/java/jdk/8u202-b08/jdk-8u202-linux-x64.tar.gz\n\n# 将包移动到指定目录并解压\nmkdir /usr/local/java\nmv jdk-8u202-linux-x64.tar.gz /usr/local/java/\ncd /usr/local/java\ntar -zxvf jdk-8u202-linux-x64.tar.gz\n\n# 配置环境变量\nvim /etc/profile\n# 在末尾添加以下内容\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_202\nexport JRE_HOME=${JAVA_HOME}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib:$CLASSPATH\nexport JAVA_PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin\nexport PATH=$PATH:${JAVA_PATH}\n\n# 加载环境变量配置文件\nsource /etc/profile\n\n# 查看是否安装成功\njava -version\n```\n\n- 创建普通用户（ElasticSearcher服务必须以普通用户身份启动）\n\n```bash\n# 创建新的组\ngroupadd es\n\n# 创建新的用户并添加到组中\nuseradd es -g es\n\n# 修改用户密码\npasswd es\n```\n\n- 使用普通用户登录，下载ElasticSearcher源码包\n\n```bash\nwget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.8.0.tar.gz\n或\ncurl -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.8.0.tar.gz\n```\n\n- 解压源码包\n\n```bash\ntar -zxvf elasticsearch-6.8.0.tar.gz\n```\n\n- 开启远程连接\n\n```bash\n# 修改配置文件\nvim elasticsearch-6.8.0/config/elasticsearch.yml\n# 修改配置如下\nnetwork.host: 0.0.0.0\n```\n\n- 使用root用户修改系统配置的limits.conf配置文件\n\n```bash\n# 修改limits.conf配置文件\nvim /etc/security/limits.conf\n# 在文件末尾追加以下内容\n*               soft    nofile             65536\n*               hard    nofile             65536\n*               soft    nproc              4096\n*               hard    nproc              4096\n```\n\n- 重新登录查看配置是否生效\n\n```bash\nulimit -Hn\nulimit -Sn\nulimit -Hu\nulimit -Su\n```\n\n- 使用root用户修改系统配置的20-nproc.conf配置文件\n\n```bash\n# 修改20-nproc.conf配置文件\nvim /etc/security/limits.d/20-nproc.conf\n# 修改配置如下(将*改为启动ElasticSearcher服务的普通用户名)\nes         soft    nproc     4096\n```\n\n- 使用root用户修改系统配置的sysctl.conf配置文件\n\n```bash\n# 修改sysctl.conf配置文件\nvim /etc/sysctl.conf\n# 在文件末尾追加以下内容\nvm.max_map_count=655360\n```\n\n- 查看配置是否生效\n\n```bash\nsysctl -p\n```\n\n- 使用普通用户重新登录，开启ElasticSearcher服务\n\n```bash\n# 进入ElasticSearcher的bin目录\ncd elasticsearch-6.8.0/bin\n\n# 开启ElasticSearcher服务\n./elasticsearch\n```\n\n---\n\n#### 1.2 CentOS7.x下通过Docker的安装部署\n\n- 设置max_map_count\n\n```bash\n# 修改sysctl.conf配置文件\nvim /etc/sysctl.conf\n# 在文件末尾追加以下内容\nvm.max_map_count=655360\n\n# 查看配置是否生效\nsysctl -p\n```\n\n- 安装部署命令\n\n```bash\ndocker run --name elasticsearch -d -e ES_JAVA_OPTS=\"-Xms512m -Xmx512m\" -e \"discovery.type=single-node\" -p 9200:9200 -p 9300:9300 elasticsearch:6.8.0\n```\n\n- 进入容器命令\n\n```bash\ndocker exec -it elasticsearch /bin/bash\n```\n\n---\n\n#### 1.3 安装IK分词器\n\n- 在线安装\n\n```bash\n# 进入ElasticSearch的bin目录\ncd elasticsearch-6.8.0/bin\n\n# 使用插件在线安装\n./elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.8.0/elasticsearch-analysis-ik-6.8.0.zip\n\n# 删除ElasticSearch的data数据目录\nrm -rf elasticsearch-6.8.0/data\n# 重启ElasticSearch服务生效\n```\n\n- 本地安装\n\n```bash\n# 下载ik源码包\nwget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.8.0/elasticsearch-analysis-ik-6.8.0.zip\n或\ncurl -O https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.8.0/elasticsearch-analysis-ik-6.8.0.zip\n\n# 解压\nunzip elasticsearch-analysis-ik-6.8.0.zip -d elasticsearch-analysis-ik-6.8.0\n\n# 将解压文件移动到ElasticSearch的plugins目录中\nmv elasticsearch-analysis-ik-6.8.0 ./elasticsearch-6.8.0/plugins/\n\n# 删除ElasticSearch的data数据目录\nrm -rf elasticsearch-6.8.0/data\n# 重启ElasticSearch服务生效\n```\n\n- 配置扩展、停用词典\n\n```bash\n# 添加以.dic结尾的文件\ntouch elasticsearch-6.8.0/plugins/elasticsearch-analysis-ik-6.8.0/config/ext.dic\ntouch elasticsearch-6.8.0/plugins/elasticsearch-analysis-ik-6.8.0/config/stop.dic\n\n# 编辑扩展词典文件(每行存放一个扩展或停用词)\nvim elasticsearch-6.8.0/plugins/elasticsearch-analysis-ik-6.8.0/config/ext.dic\nvim elasticsearch-6.8.0/plugins/elasticsearch-analysis-ik-6.8.0/config/stop.dic\n\n# 修改IK配置文件\nvim elasticsearch-6.8.0/plugins/elasticsearch-analysis-ik-6.8.0/config/IKAnalyzer.cfg.xml\n# 修改配置如下\n<entry key=\"ext_dict\">ext.dic<entry>\t\t\t# 扩展词典\n<entry key=\"ext_stopwords\">stop.dic</entry>\t\t# 停用词典\n\n# 删除ElasticSearch的data数据目录\nrm -rf elasticsearch-6.8.0/data\n# 重启ElasticSearch服务生效\n```\n\n- 配置远程扩展、停用词典\n\n```bash\n# 修改IK配置文件\nvim elasticsearch-6.8.0/plugins/elasticsearch-analysis-ik-6.8.0/config/IKAnalyzer.cfg.xml\n# 修改配置如下\n<entry key=\"remote_ext_dict\">http://ip:port/ext.txt</entry>\t\t\t# 扩展词典\n<entry key=\"remote_ext_stopwords\">http://ip:port/stop.txt</entry>\t# 停用词典\n\n# 删除ElasticSearch的data数据目录\nrm -rf elasticsearch-6.8.0/data\n# 重启ElasticSearch服务生效\n```\n\n---\n\n#### 1.4 跨域配置\n\n- 修改ElasticSearch的配置文件\n\n```bash\n# 修改elasticsearch.yml文件\nvim elasticsearch-6.8.0/config/elasticsearch.yml\n# 在文件末尾追加以下内容\nhttp.cors.enabled: true \nhttp.cors.allow-origin: \"*\"\n\n# 重启ElasticSearch服务生效\n```\n\n---\n\n#### 1.5 集群\n\n- 设置启动内存\n\n```bash\n# 修改jvm.options文件\nvim elasticsearch-6.8.0/config/jvm.options\n# 修改配置如下（根据实际情况修改）\n-Xms512m\n-Xmx512m\n```\n\n- 修改ElasticSearch的配置文件\n\n```bash\n# 修改elasticsearch.yml文件\nvim elasticsearch-6.8.0/config/elasticsearch.yml\n# 修改配置如下\ncluster.name: es-cluster\t\t# 集群名称\nnode.name: es-01\t\t\t\t# 集群当前节点名称\nnetwork.host: 0.0.0.0\t\t\t# 开启远程连接\nhttp.port: 9200\t\t\t\t\t# 监听端口\ndiscovery.zen.ping.unicast.hosts: [\"192.168.1.2:9200\", \"192.168.1.2:9300\"]\t# 其他节点地址\ngateway.recover_after_nodes: 3\t# 集群可做master的最小节点数\ntransport.tcp.port: 9300\t\t# 集群TCP端口\n```\n\n- 查看集群健康状态：访问http://ip:port/_cat/health?v\n\n&nbsp;\n\n---\n\n&nbsp;\n\n### 2. ElasticSearch的使用\n\n#### 2.1 SpringBoot集成ElasticSearch\n\n- 新建SpringBoot项目\n- pom.xml依赖\n\n```xml\n<dependencies>\n\n        <!--web依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <!--ElasticSearcher依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-elasticsearch</artifactId>\n        </dependency>\n\n        <!--lombok依赖-->\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n\n        <!--测试依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n    </dependencies>\n```\n\n- application.yml配置\n\n```yaml\n# 服务器端口\nserver:\n  port: 8080\n```\n\n- ElasticSearcher配置类\n\n```java\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.elasticsearch.client.ClientConfiguration;\nimport org.springframework.data.elasticsearch.client.RestClients;\nimport org.springframework.data.elasticsearch.config.AbstractElasticsearchConfiguration;\n\n/**\n * ElasticSearcher配置类\n */\n@Configuration\npublic class ElasticSearcherRestClientConfiguration extends AbstractElasticsearchConfiguration {\n\n    /**\n     * 创建RestHighLevelClient对象\n     */\n    @Override\n    @Bean\n    public RestHighLevelClient elasticsearchClient() {\n\n        // 定义客户端配置对象\n        final ClientConfiguration clientConfiguration = ClientConfiguration\n                .builder()\n                .connectedTo(\"192.168.150.128:9200\")\n                .build();\n\n        // 通过RestClients对象创建RestHighLevelClient对象\n        return RestClients.create(clientConfiguration).rest();\n    }\n\n}\n```\n\n---\n\n#### 2.2 使用高级客户端RestHighLevelClient操作ElasticSearcher\n\n- 操作索引\n\n```java\nimport org.elasticsearch.ElasticsearchStatusException;\nimport org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\nimport org.elasticsearch.action.support.master.AcknowledgedResponse;\nimport org.elasticsearch.client.RequestOptions;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.elasticsearch.client.indices.CreateIndexRequest;\nimport org.elasticsearch.client.indices.CreateIndexResponse;\nimport org.elasticsearch.client.indices.GetIndexRequest;\nimport org.elasticsearch.client.indices.GetIndexResponse;\nimport org.elasticsearch.cluster.metadata.MappingMetaData;\nimport org.elasticsearch.common.settings.Settings;\nimport org.elasticsearch.rest.RestStatus;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * 有关索引操作的测试\n */\n@SpringBootTest\nclass IndexTests {\n\n    @SuppressWarnings(\"all\")\n    @Autowired\n    private RestHighLevelClient restHighLevelClient;\n\n    /**\n     * 创建索引\n     */\n    @Test\n    void createIndex() throws IOException {\n\n        int INDEX_NUMBER_OF_SHARDS = 1;     // 索引分片数量\n        int INDEX_NUMBER_OF_REPLICAS = 1;   // 索引副本数量\n        String CREATE_INDEX_NAME = \"person2\";   // 要创建的索引名\n        Map<String, String> FIELDS = new HashMap<>();   // 要创建的索引类型下的字段（名称，类型）\n\n        FIELDS.put(\"name\", \"keyword\");\n        FIELDS.put(\"age\", \"integer\");\n        FIELDS.put(\"info\", \"text\");\n\n        // 创建索引请求对象\n        CreateIndexRequest createIndexRequest = new CreateIndexRequest(CREATE_INDEX_NAME);\n\n        // 设置索引请求对象\n        createIndexRequest.settings(Settings\n                .builder()\n                .put(\"index.number_of_shards\", INDEX_NUMBER_OF_SHARDS)   // 分片数量\n                .put(\"index.number_of_replicas\", INDEX_NUMBER_OF_REPLICAS) // 分片副本数量\n        );\n\n        // 设置映射字段及类型\n        Map<String, Object> fields = new HashMap<>();\n        Set<String> fieldNameSet = FIELDS.keySet();\n        for (String fieldName : fieldNameSet) {\n            Map<String, Object> field = new HashMap<>();\n            field.put(\"type\", FIELDS.get(fieldName));   // 设置属性字段类型\n            if (\"text\".equals(FIELDS.get(fieldName))) {\n                field.put(\"analyzer\", \"ik_max_word\");   // 设置IK分词器\n            }\n            fields.put(fieldName, field);\n        }\n\n        Map<String, Object> properties = new HashMap<>();\n        properties.put(\"properties\", fields);\n        createIndexRequest.mapping(properties);\n\n        // 通过索引请求对象创建索引\n        CreateIndexResponse createIndexResponse = restHighLevelClient.indices().create(createIndexRequest, RequestOptions.DEFAULT);\n\n        if (createIndexResponse.isAcknowledged()){\n            System.out.println(\"创建索引成功\");\n        } else {\n            System.out.println(\"创建索引失败\");\n        }\n\n    }\n\n    /**\n     * 删除索引\n     */\n    @Test\n    void deleteIndex() throws IOException {\n\n        String[] DELETE_INDEX_NAMES = {\"person\"};  // 要删除的索引名数组\n\n        // 删除索引请求对象\n        DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest(DELETE_INDEX_NAMES);\n\n        AcknowledgedResponse acknowledgedResponse = restHighLevelClient.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);\n\n        if (acknowledgedResponse.isAcknowledged()) {\n            System.out.println(\"删除索引成功\");\n        } else {\n            System.out.println(\"删除索引失败\");\n        }\n    }\n\n    /**\n     * 查询索引\n     */\n    @Test\n    void getIndexAll() throws IOException {\n\n        String[] GET_INDEX_NAMES = {\"_all\"};  // 要查询的索引名数组（\"_all\"表示所有索引）\n\n        // 查询索引请求对象\n        GetIndexRequest getIndexRequest = new GetIndexRequest(GET_INDEX_NAMES);\n\n        try {\n            // 获取所有索引的返回对象\n            GetIndexResponse getIndexResponse = restHighLevelClient.indices().get(getIndexRequest, RequestOptions.DEFAULT);\n            Map<String, MappingMetaData> mappings = getIndexResponse.getMappings();\n\n            Set<String> indexNameSet = mappings.keySet();\n            for (String indexName : indexNameSet) {\n                System.out.println(\"++++++++++++++++++++++++++++++++++++\");\n                System.out.println(\"索引名：\" + indexName);\n                System.out.println(\"类型名：\" + mappings.get(indexName).type());\n\n                Map<String, Object> properties = mappings.get(indexName).sourceAsMap();\n                Map<String, Object> fields = (Map<String, Object>) properties.get(\"properties\");\n\n                System.out.println(\"属性字段：\");\n                Set<String> fieldNameSet = fields.keySet();\n                for (String fieldName : fieldNameSet) {\n                    Map<String, Object> field = (Map<String, Object>) fields.get(fieldName);\n                    System.out.println(\"\\t\" + fieldName + \": \" + field.get(\"type\"));\n                }\n            }\n        } catch (ElasticsearchStatusException e) {\n            if (RestStatus.NOT_FOUND.equals(e.status())) {\n                System.out.println(\"没有索引\");\n            } else {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n```\n\n- 操作文档\n\n```java\nimport org.elasticsearch.action.bulk.BulkRequest;\nimport org.elasticsearch.action.bulk.BulkResponse;\nimport org.elasticsearch.action.delete.DeleteRequest;\nimport org.elasticsearch.action.delete.DeleteResponse;\nimport org.elasticsearch.action.index.IndexRequest;\nimport org.elasticsearch.action.index.IndexResponse;\nimport org.elasticsearch.action.search.SearchRequest;\nimport org.elasticsearch.action.search.SearchResponse;\nimport org.elasticsearch.action.update.UpdateRequest;\nimport org.elasticsearch.action.update.UpdateResponse;\nimport org.elasticsearch.client.RequestOptions;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.elasticsearch.index.query.QueryBuilders;\nimport org.elasticsearch.rest.RestStatus;\nimport org.elasticsearch.search.SearchHit;\nimport org.elasticsearch.search.builder.SearchSourceBuilder;\nimport org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;\nimport org.elasticsearch.search.fetch.subphase.highlight.HighlightField;\nimport org.elasticsearch.search.sort.SortOrder;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.io.IOException;\nimport java.util.*;\n\n/**\n * 有关文档数据数据操作的测试\n */\n@SpringBootTest\nclass DocumentTests {\n\n    @SuppressWarnings(\"all\")\n    @Autowired\n    private RestHighLevelClient restHighLevelClient;\n\n    /**\n     * 创建文档\n     */\n    @Test\n    void createDocument() throws IOException {\n\n        String INDEX_NAME = \"person\";   // 索引名\n        String TYPE = \"_doc\";   // 索引类型\n\n        // 创建索引文档请求操作对象\n        IndexRequest indexRequest = new IndexRequest(INDEX_NAME, TYPE);\n\n        // 设置文档值\n        Map<String, Object> fieldValues = new HashMap<>();\n        fieldValues.put(\"name\", \"张三\");\n        fieldValues.put(\"age\", 19);\n        fieldValues.put(\"info\", \"张三是个好人！\");\n\n        indexRequest.source(fieldValues);\n\n        // 创建索引文档\n        IndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n\n        if (RestStatus.CREATED.equals(indexResponse.status())) {\n            System.out.println(\"创建文档成功\");\n        } else {\n            System.out.println(\"创建文档失败\");\n        }\n    }\n\n    /**\n     * 删除文档\n     */\n    @Test\n    void deleteDocument() throws IOException {\n\n        String INDEX_NAME = \"person\";   // 索引名\n        String TYPE = \"_doc\";   // 索引类型\n        String DOCUMENT_ID = \"e4uAf3gB_a05_96F39MM\";    // 文档ID\n\n        // 删除索引文档请求操作对象\n        DeleteRequest deleteRequest = new DeleteRequest(INDEX_NAME, TYPE, DOCUMENT_ID);\n\n        // 删除索引文档\n        DeleteResponse deleteResponse = restHighLevelClient.delete(deleteRequest, RequestOptions.DEFAULT);\n\n        if (RestStatus.OK.equals(deleteResponse.status())) {\n            System.out.println(\"删除文档成功\");\n        } else {\n            System.out.println(\"删除文档失败\");\n        }\n    }\n\n    /**\n     * 修改文档\n     */\n    @Test\n    void updateDocument() throws IOException {\n\n        String INDEX_NAME = \"person\";   // 索引名\n        String TYPE = \"_doc\";   // 索引类型\n        String DOCUMENT_ID = \"fYsMgHgB_a05_96FytPb\";    // 文档ID\n\n        // 更新索引文档请求操作对象\n        UpdateRequest updateRequest = new UpdateRequest(INDEX_NAME, TYPE, DOCUMENT_ID);\n\n        // 设置文档要更新的值\n        Map<String, Object> updateFieldValues = new HashMap<>();\n        updateFieldValues.put(\"name\", \"李四\");\n        updateFieldValues.put(\"age\", 20);\n\n        updateRequest.doc(updateFieldValues);\n\n        // 更新索引文档\n        UpdateResponse updateResponse = restHighLevelClient.update(updateRequest, RequestOptions.DEFAULT);\n\n        if (RestStatus.OK.equals(updateResponse.status())) {\n            System.out.println(\"删除文档成功\");\n        } else {\n            System.out.println(\"删除文档失败\");\n        }\n    }\n\n    /**\n     * 查询文档\n     */\n    @Test\n    void searcherDocument() throws IOException {\n\n        String INDEX_NAME = \"person\";   // 索引名\n        String TYPE = \"_doc\";   // 索引类型\n\n        // 查询索引文档请求操作对象\n        SearchRequest searchRequest = new SearchRequest(INDEX_NAME);\n\n        // 查询条件对象\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchSourceBuilder\n                .query(QueryBuilders.termQuery(\"info\", \"张\"))   // 查询条件\n                .from(0)    // 从第几条文档开始获取\n                .size(20)   // 每次获取多少条文档\n                .postFilter(QueryBuilders.matchAllQuery())  // 过滤条件\n                .sort(\"age\", SortOrder.DESC)    // 排序\n                .highlighter(new HighlightBuilder()     // 高亮\n                        .field(\"*\")     // 高亮的字段\n                        .requireFieldMatch(false)   // 关闭仅匹配字段高亮\n                        .preTags(\"<span style='color: red;'>\")  // 高亮字段前缀\n                        .postTags(\"</span>\")    // 高亮字段后缀\n                );\n\n        searchRequest.types(TYPE).source(searchSourceBuilder);\n\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n\n        System.out.println(\"+++++++++++++++++++++++++++++++++++++++++++\\n\");\n\n        System.out.println(\"符合条件的文档总数：\" + searchResponse.getHits().getTotalHits() + \"\\n\");\n        System.out.println(\"符合条件的文档得分最大值：\" + searchResponse.getHits().getMaxScore() + \"\\n\");\n\n        SearchHit[] documents = searchResponse.getHits().getHits();\n\n        System.out.println(\"文档：\\n\");\n        int count = 1;\n        for (SearchHit document : documents) {\n\n            // 文档ID\n            System.out.println(count + \":\\t_id: \" + document.getId());\n\n            // 文档数据\n            Map<String, Object> documentMap = document.getSourceAsMap();\n            Set<String> fieldNames = documentMap.keySet();\n            if (!fieldNames.isEmpty()) {\n                System.out.println(\"\\t_source: \");\n                for (String fieldName : fieldNames) {\n                    if (\"id\".equals(fieldName)) {\n                        continue;\n                    }\n                    System.out.println(\"\\t\\t\" + fieldName + \": \" + documentMap.get(fieldName));\n                }\n            }\n\n            // 高亮数据\n            Map<String, HighlightField> highlightDocumentMap = document.getHighlightFields();\n            Set<String> highlightFieldNames = highlightDocumentMap.keySet();\n            if (!highlightFieldNames.isEmpty()) {\n                System.out.println(\"\\t_highlight: \");\n                for (String highlightFieldName : highlightFieldNames) {\n                    System.out.println(\"\\t\\t\" + highlightFieldName + \": \" + highlightDocumentMap.get(highlightFieldName).fragments()[0]);\n                }\n            }\n\n            System.out.println();\n\n            count++;\n        }\n\n        System.out.println(\"+++++++++++++++++++++++++++++++++++++++++++\");\n    }\n\n    /**\n     * 批量操作\n     */\n    @Test\n    void bulkDocument() throws IOException {\n\n        String INDEX_NAME = \"person\";   // 索引名\n        String TYPE = \"_doc\";   // 索引类型\n        String DOCUMENT_ID = \"fYsMgHgB_a05_96FytPb\";    // 文档ID\n\n        // 批量操作索引文档请求操作对象\n        BulkRequest bulkRequest = new BulkRequest();\n\n        // 创建索引文档请求操作对象\n        IndexRequest indexRequest = new IndexRequest(INDEX_NAME, TYPE);\n\n        // 设置文档值\n        Map<String, Object> fieldValues = new HashMap<>();\n        fieldValues.put(\"name\", \"小明\");\n        fieldValues.put(\"age\", 12);\n        fieldValues.put(\"info\", \"小明是个好学生！\");\n\n        indexRequest.source(fieldValues);\n\n        // 更新索引文档请求操作对象\n        UpdateRequest updateRequest = new UpdateRequest(INDEX_NAME, TYPE, DOCUMENT_ID);\n\n        // 设置文档要更新的值\n        Map<String, Object> updateFieldValues = new HashMap<>();\n        updateFieldValues.put(\"name\", \"王五\");\n        updateFieldValues.put(\"age\", 21);\n\n        updateRequest.doc(updateFieldValues);\n\n        bulkRequest.add(indexRequest, updateRequest);\n\n        // 批量操作\n        BulkResponse bulkResponse = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);\n\n        if (RestStatus.OK.equals(bulkResponse.status())) {\n            System.out.println(\"批量操作文档成功\");\n        } else {\n            System.out.println(\"批量操作文档失败\");\n        }\n\n    }\n\n}\n```\n\n---\n\n#### 2.3 使用Repository接口操作ElasticSearcher\n\n- 实体类\n\n```java\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.elasticsearch.annotations.Document;\nimport org.springframework.data.elasticsearch.annotations.Field;\nimport org.springframework.data.elasticsearch.annotations.FieldType;\n\n@Document(indexName = \"person\", type = \"_doc\")  // 通过该注解会自动创建索引，但索引创建前不能存在\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Person {\n\n    @Id\n    private String id;\n\n    @Field(type = FieldType.Keyword)\n    private String name;\n\n    @Field(type = FieldType.Integer)\n    private Integer age;\n\n    @Field(type = FieldType.Text, analyzer = \"ik_max_word\")\n    private String info;\n\n}\n```\n\n- 自定义Repository接口\n\n```java\nimport java.util.List;\n\n/**\n * 自定义Repository接口\n * <Person, String> Person为实体类，String为实体类中主键ID的类型\n */\npublic interface PersonRepository extends ElasticsearchRepository<Person, String> {\n\n    // 自定义查询\n    List<Person> findByAge(Integer age);    // 通过age查询\n    List<Person> findByAgeAndName(Integer age, String name);    // 通过age和name查询\n    List<Person> findByAgeOrName(Integer age, String name); // 通过age或name查询\n    List<Person> findByAgeBetween(Integer low, Integer high);   // 查询age在low和high范围内的\n    List<Person> findByAgeGreaterThan(Integer value);   // 查询age大于value的\n    List<Person> findByAgeGreaterThanEqual(Integer value);  // 查询age大于等于value的\n    List<Person> findByNameStartingWith(String name);   // 查询以name开头的\n\n}\n```\n\n- 测试\n\n```java\nimport com.mo.elasticsearcher.elasticsearcher.dao.PersonRepository;\nimport com.mo.elasticsearcher.model.entity.Person;\nimport org.elasticsearch.index.query.QueryBuilders;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Sort;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@SpringBootTest\npublic class RepositoryTests {\n\n    @Autowired\n    private PersonRepository personRepository;\n\n    /**\n     * 添加文档\n     */\n    @Test\n    void saveDocument() {\n\n        Person person = new Person();\n        person.setName(\"张三\");\n        person.setAge(18);\n        person.setInfo(\"张三是个好人\");\n\n        personRepository.save(person);\n    }\n\n    /**\n     * 删除文档\n     */\n    @Test\n    void deleteDocument() {\n        personRepository.deleteById(\"f4tPgHgB_a05_96FBNOQ\");\n    }\n\n    /**\n     * 删除所有文档\n     */\n    @Test\n    void deleteDocumentAll() {\n        personRepository.deleteAll();\n    }\n\n    /**\n     * 查询文档\n     */\n    @Test\n    void searcherDocument() {\n        Optional<Person> optional = personRepository.findById(\"f4tPgHgB_a05_96FBNOQ\");\n        Person person = optional.get();\n        System.out.println(person);\n    }\n\n    /**\n     * 查询所有文档\n     */\n    @Test\n    void searcherDocumentAll() {\n        Sort sort = Sort.by(Sort.Order.desc(\"age\"));    // 排序\n        Iterable<Person> persons = personRepository.findAll(sort);\n        persons.forEach(System.out::println);\n    }\n\n    /**\n     * 分页\n     */\n    @Test\n    void searcherDocumentLimit() {\n        Page<Person> personPage = personRepository.search(QueryBuilders.matchAllQuery(), PageRequest.of(0, 20));\n        personPage.forEach(System.out::println);\n    }\n\n    /**\n     * 自定义查询\n     */\n    @Test\n    void searcherDocumentMore() {\n\n        List<Person> byAge = personRepository.findByAge(18);\n        byAge.forEach(System.out::println);\n\n        List<Person> byAgeAndName = personRepository.findByAgeAndName(18, \"张三\");\n        byAgeAndName.forEach(System.out::println);\n\n        List<Person> byAgeOrName = personRepository.findByAgeOrName(18, \"张三\");\n        byAgeOrName.forEach(System.out::println);\n\n        List<Person> byAgeBetween = personRepository.findByAgeBetween(18, 25);\n        byAgeBetween.forEach(System.out::println);\n\n        List<Person> byAgeGreaterThan = personRepository.findByAgeGreaterThan(18);\n        byAgeGreaterThan.forEach(System.out::println);\n\n        List<Person> byAgeGreaterThanEqual = personRepository.findByAgeGreaterThanEqual(18);\n        byAgeGreaterThanEqual.forEach(System.out::println);\n\n        List<Person> byNameStartingWith = personRepository.findByNameStartingWith(\"张\");\n        byNameStartingWith.forEach(System.out::println);\n\n    }\n\n}\n```","categoryId":"1","categoryName":"技术记录","tags":[{"id":"2","name":"Java"},{"id":"12","name":"ElasticSearcher"}],"views":2,"topping":false,"status":1,"createTime":"2022-10-24 21:04:46"}}