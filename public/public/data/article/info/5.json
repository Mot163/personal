{"code":0,"message":"获取文章简要信息成功!","data":{"id":"5","title":"Java数组","description":"Java数组","cover":"","content":"\n## 1. 概述\n\n- 数组是相同类型数据的有序集合\n- 数组中的数据具有一定的先后次序\n- 数组中的的每一个数据称为数组元素，每个数组元素可以通过对应的下表访问\n- <font color=red>数组的四个基本特点：</font>\n  - <font color=red>数组的长度数是确定的，数组一但被创建，它的长度就无法改变。</font>\n  - <font color=red>数组的元素类型必须一致，不能出现混合类型。</font>\n  - <font color=red>数组的元素类型可以是任何类型，包括基本类型和引用类型。</font>\n  - <font color=red>数组变量属于引用类型，也可以被看作对象，数组的每个元素相当于数组的成员变量。</font>\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 2. 数组的声明和创建\n\n- 数组在使用之前必须声明\n\n- Java中使用new关键字创建数组\n\n- 数组的元素通过下标访问，<font color=red>下标从0开始</font>\n\n- 数组的长度获取语法为：数组名.length\n\n- 数组声明创建内存简单图示：\n\n  ![1](https://img-blog.csdnimg.cn/20200816122111337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpbmdKaW5fbW8=,size_16,color_FFFFFF,t_70#pic_center)\n\n- 数组声明创建格式：类型[] 数组名 = new 类型[数组长度];\n\n```java\npublic class Demo {\n\n    public static void main(String[] args) {\n        \n        /**********动态创建************/\n        \n        //数组声明\n        int[] array;\n        \n        //数组创建\n        array = new int[5];\n        array[0] = 1;\n        array[1] = 2;\n        array[2] = 3;\n        array[3] = 4;\n        array[4] = 5;\n        \n        /**********静态创建************/\n        \n        //数组声明+赋值\n        int[] array2 = {1,2,3,4,5};\n        \n        System.out.println(array2[0]);\n        System.out.println(array2[1]);\n        System.out.println(array2[2]);\n        System.out.println(array2[3]);\n        System.out.println(array2[4]);\n     // System.out.println(array2[5]); (将出现数组越界错误：ArrayIndexOutOfBoundsException)\n        \n        System.out.println(array2.length);\n        \n        System.out.println(\"结束\");\n        \n        /*\n        结果：\n        1\n        2\n        3\n        4\n        5\n        5\n        结束\n         */\n        \n    }\n\n}\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 3. 数组的使用\n\n- 数组的for-each遍历\n\n  ```java\n  public class Demo {\n  \n      public static void main(String[] args) {\n          \n          int[] arrays = {1,2,3,4,5};\n          \n          //for-each遍历输出\n          for(int array : arrays) {\n              System.out.println(array);\n          }\n          \n          System.out.println(\"结束\");\n          \n          /*\n          结果：\n          1\n          2\n          3\n          4\n          5\n          结束\n           */\n          \n      }\n  \n  }\n  ```\n\n- 数组作为参数传入\n\n  ```java\n  public class Demo {\n  \n      public static void main(String[] args) {\n          \n          int[] arrays = {1,2,3,4,5};\n          \n          printArray(arrays);\n          \n          System.out.println(\"结束\");\n          \n          /*\n          结果：\n          1\n          2\n          3\n          4\n          5\n          结束\n           */\n          \n      }\n      \n      //遍历打印传入数组的值\n      public static void printArray(int[] arrays) {\n          \n          for(int array : arrays) {\n              System.out.println(array);\n          }\n          \n      }\n  \n  }\n  ```\n\n- 数组作为返回值\n\n  ```java\n  public class Demo {\n  \n      public static void main(String[] args) {\n          \n          int[] arrays = {1,2,3,4,5};\n          \n          arrays = reverse(arrays);\n          printArray(arrays);\n          \n          System.out.println(\"结束\");\n          \n          /*\n          结果：\n          5\n          4\n          3\n          2\n          1\n          结束\n           */\n          \n      }\n      \n      //将传入数组的元素顺序进行反转\n      public static int[] reverse(int[] arrays) {\n          \n          int[] tmpArrays = int[arrays.length];\n          \n          for(int i=0,int j=arrays.length-1;i<arrays.length;i++,j--) {\n              tmpArrays[i] = arrays[j];\n          }\n          \n          return tmpArrays;\n          \n      }\n      \n      //遍历打印传入数组的值\n      public static void printArray(int[] arrays) {\n          \n          for(int array : arrays) {\n              System.out.println(array);\n          }\n          \n      }\n  \n  }\n  ```\n\n  \n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 4. 多维数组\n\n- 多维数组是对一维数组的拓展，本质上是多个数组的嵌套，即数组的元素也是数组，可以描述更复杂的情况\n- 多维数组中最常用的就是二维数组，二维数组的每个元素就是一个一维数组\n- 二维数组的声明创建：类型\\[][] 二维数组名 = new 类型\\[数组行长度][数组列长度];\n\n```java\npublic class Demo {\n\n    public static void main(String[] args) {\n        \n        //二维数组声明创建\n        int[][] arrays = new int[2][2];\n        arrays[0][0] = 1;\n        arrays[0][1] = 2;\n        arrays[1][0] = 3;\n        arrays[1][1] = 4;\n        \n        /*\n         静态创建方式：\n         int[][] arrays = {{1,2},{3,4}}；\n         */\n        \n        System.out.println(array[0][0]);\n        System.out.println(array[0][1]);\n        System.out.println(array[1][0]);\n        System.out.println(array[1][1]);\n        \n        System.out.println(array.length);\n        System.out.println(array[0].length);\n        \n        System.out.println(\"结束\");\n        \n        /*\n        结果：\n        1\n        2\n        3\n        4\n        2\n        2\n        结束\n         */\n        \n    }\n\n}\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 5. Arrays类\n\n- Arrays类是数组的工具类，包路径：java.util.Array\n\n- 数组本身没有多少方法可以使用，要操作数组可以用Arrays类\n\n- Arrays类的方法都为静态方法，可以直接”Arrays.方法名“来使用\n\n- Arrays常用方法：\n\n  - fill()方法，给数组赋值\n\n    ```java\n    import java.util.Arrays;\n    \n    public class Demo {\n    \n        public static void main(String[] args) {\n            \n            int[] arrays = {1,2,3,4};\n            \n            Arrays.fill(arrays,0);\n            printArray(arrays);\n            \n            System.out.println(\"结束\");\n            \n            /*\n            结果：\n            0\n            0\n            0\n            0\n            结束\n             */\n            \n        }\n        \n        //遍历打印传入数组的值\n        public static void printArray(int[] arrays) {\n            \n            for(int array : arrays) {\n                System.out.println(array);\n            }\n            \n        }\n    \n    }\n    ```\n\n  - sort()方法，将数组按升序排序\n\n    ```java\n    import java.util.Arrays;\n    \n    public class Demo {\n    \n        public static void main(String[] args) {\n            \n            int[] arrays = {2,3,1,4};\n            \n            Arrays.sort(arrays);\n            printArray(arrays);\n            \n            System.out.println(\"结束\");\n            \n            /*\n            结果：\n            1\n            2\n            3\n            4\n            结束\n             */\n            \n        }\n        \n        //遍历打印传入数组的值\n        public static void printArray(int[] arrays) {\n            \n            for(int array : arrays) {\n                System.out.println(array);\n            }\n            \n        }\n    \n    }\n    ```\n\n  - equals()方法，比较两个数组中元素的值是否相等\n\n    ```java\n    import java.util.Arrays;\n    \n    public class Demo {\n    \n        public static void main(String[] args) {\n            \n            int[] arrays1 = {1,2,3};\n            int[] arrays2 = {1,2,3};\n            int[] arrays3 = {1,2};\n            \n            System.out.println(Arrays.equals(arrays1,arrays2));\n            System.out.println(Arrays.equals(arrays1,arrays3));\n            \n            System.out.println(\"结束\");\n            \n            /*\n            结果：\n            true\n            false\n            结束\n             */\n            \n        }\n        \n    }\n    ```\n\n  - binarySearch()方法，对排序好的数组进行二分法查找，返回值为所查找值的下标，一般配合sort使用\n\n    ```java\n    import java.util.Arrays;\n    \n    public class Demo {\n    \n        public static void main(String[] args) {\n            \n            int[] arrays = {1,2,3,4,5,6,7,8,9};\n            \n            System.out.println(Arrays.binarySearch(arrays,4));\n            \n            System.out.println(\"结束\");\n            \n            /*\n            结果：\n            3\n            结束\n             */\n            \n        }\n        \n    }\n    ```\n\n    \n\n","categoryId":"1","categoryName":"技术记录","tags":[{"id":"2","name":"Java"}],"views":1,"topping":false,"status":1,"createTime":"2022-10-24 20:47:04"}}