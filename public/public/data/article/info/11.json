{"code":0,"message":"获取文章简要信息成功!","data":{"id":"11","title":"Java反射","description":"Java反射","cover":"","content":"## 1. 概述\n\n- 反射是Java中操作对象的一种机制，它允许程序在执行期间获取任何类的内部信息，并直接操作任意对象的内部属性及方法，这使得Java语言具有一定的动态性，运用更加灵活。\n- 使用反射可以降低代码的耦合度、实现动态代理等\n- 使用反射会降低一定的性能，使用不当会造成很高的资源消耗。\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 2. Class对象\n\n- Class对象是实现反射的关键，它包含了一个类的完整的结构信息\n- <font color=red>一个类只有一个Class对象</font>\n- Clas对象的声明：Class Class对象名\n- Class本身也是一个类\n- Class对象只能由系统建立\n- <font color=red>同一个类创建的不同实例对象指向同一个Class对象</font>\n- 一个Class对象对应一个加载到JVM中的一个.class文件\n- 通过反射可以获取类的结构：\n  - Field：属性（字段）\n  - Method：方法\n  - Constructor：构造器\n  - Superclass：父类对象\n  - interface：接口\n  - Annotation：注解\n  - ...\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 3. 获取Class对象\n\n- 获取Class对象有五种方式：\n\n  - <font color=red>通过”类名.class“获取</font>\n  - <font color=red>通过实例对象调用getClass()方法获取</font>\n  - <font color=red>通过Class.forName()方法传入类的全名获取</font>\n  - 通过”类名.TYPE“获取，只适用于基本数据类型\n  - 利用ClassLoder获取\n\n  ```java\n  // 获取类的Class对象\n  public class ReflectionDemo01 {\n  \n      public static void main(String[] args) throws ClassNotFoundException {\n  \n          // 通过类获取Class对象\n          Class personClass1 = Person.class;\n  \n          // 通过实例获取Class对象\n          Class personClass2 = new Person().getClass();\n  \n          // 通过类的全类名获取Class对象，会抛出一个ClassNotFoundException异常\n          Class personClass3 = Class.forName(\"com.example.reflection.Person\");\n  \n          // “类名.TYPE”获取Class对象，只适用于内置基本数据类型\n          Class integerClass = Integer.TYPE;\n  \n          System.out.println(personClass1.hashCode());\n          System.out.println(personClass2.hashCode());\n          System.out.println(personClass3.hashCode());\n          System.out.println(integerClass.hashCode());\n  \n          /*\n          一个结果：\n          356573597\n          356573597\n          356573597\n          1735600054\n          （前三个hashCode一样，说明一个类只有一个Class对象）\n           */\n  \n      }\n  \n  }\n  \n  // 一个实体类pojo\n  class Person {\n  \n      // 属性\n      private String name;\n      private int age;\n  \n      // 无参构造\n      public Person() {}\n  \n      // 全参构造\n      public Person(String name, int age) {\n          this.name = name;\n          this.age = age;\n      }\n  \n      // Set/Get方法\n      public String getName() {\n          return name;\n      }\n  \n      public void setName(String name) {\n          this.name = name;\n      }\n  \n      public int getAge() {\n          return age;\n      }\n  \n      public void setAge(int age) {\n          this.age = age;\n      }\n  \n      // 重写toString方法\n      @Override\n      public String toString() {\n          return \"Person{\" +\n                  \"name='\" + name + '\\'' +\n                  \", age=\" + age +\n                  '}';\n      }\n  \n  }\n  ```\n\n- 能够获取Class对象的类型：\n\n  - class(外部类、成员内部类、静态内部类、局部内部类、匿名内部类)\n  - interface(接口)\n  - \\[\\](数组)\n  - enum(枚举)\n  - @interface(注解)\n  - primitive_type(基本数据类型)\n  - void\n\n  ```java\n  import java.lang.annotation.ElementType;\n  \n  // 有Class对象的类型\n  public class ReflectionDemo02 {\n  \n      public static void main(String[] args) throws ClassNotFoundException {\n  \n          // class(外部类、成员内部类、静态内部类、局部内部类、匿名内部类)\n          Class objectClass = Object.class;\n  \n          // interface(接口)\n          Class runnableClass = Runnable.class;\n  \n          // [](数组)\n          Class arrayClass = int[].class;\n  \n          // enum(枚举)\n          Class elementTypeClass = ElementType.class;\n  \n          // @interface(注解)\n          Class overrideClass = Override.class;\n  \n          // primitive_type(基本数据类型)\n          Class integerClass = int.class;\n  \n          // void\n          Class voidClass = void.class;\n  \n      }\n  \n  }\n  ```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 4. 反射获取类的属性、方法、构造器\n\n- 获取属性：\n  - Class对象.getFields()：获取本类所有（包括继承的）公共属性（字段）\n  - Class对象.getDeclaredFields()：获取本类所有属性（字段）\n  - Class对象.getField()：获取本类指定的一个（包括继承的）公共属性（字段）\n  - Class对象.getDeclaredField()：获取本类指定的一个属性（字段）\n- 获取方法：\n  - Class对象.getMethods()：获取本类所有（包括继承的）公共方法\n  - Class对象.getDeclaredMethods()：获取本类所有方法\n  - Class对象.getMethod()：获取本类指定的一个（包括继承的）公共方法\n  - Class对象.getDeclaredMethod()：获取本类指定的一个方法\n- 获取构造器：\n  - Class对象.getConstructors()：获取本类所有公共构造器\n  - Class对象.getDeclaredConstructors()：获取本类所有构造器\n  - Class对象.getConstructor()：获取本类指定的一个公共构造器\n  - Class对象.getDeclaredConstructor()：获取本类指定的一个构造器\n\n```java\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n\n// 获取Class对象的属性、方法、构造器\npublic class ReflectionDemo03 {\n\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, NoSuchMethodException {\n\n        // 获取一个Class对象\n        Class person2Class = Person2.class;\n\n        // 属性（字段）\n        System.out.println(\"========属性（字段）========\");\n        Field[] fields;\n\n        fields = person2Class.getFields();  // 获取本类所有（包括继承的）公共属性（字段）\n        for (Field field : fields) {\n            System.out.println(\"getFields：\"+field);\n        }\n\n        fields = person2Class.getDeclaredFields();  // 获取本类所有属性（字段）\n        for (Field field : fields) {\n            System.out.println(\"getDeclaredFields：\"+field);\n        }\n\n        Field field;\n\n        field = person2Class.getField(\"alias\"); // 获取本类指定的一个（包括继承的）公共属性（字段）\n        System.out.println(\"getField：\"+field);\n\n        field = person2Class.getDeclaredField(\"name\"); // 获取本类指定的一个属性（字段）\n        System.out.println(\"getDeclaredField：\"+field);\n\n        // 方法\n        System.out.println(\"========方法========\");\n        Method[] methods;\n\n        methods = person2Class.getMethods();    // 获取本类所有（包括继承的）公共方法\n        for (Method method : methods) {\n            System.out.println(\"getMethods：\"+method);\n        }\n\n        methods = person2Class.getDeclaredMethods();    // 获取本类所有方法\n        for (Method method : methods) {\n            System.out.println(\"getDeclaredMethods：\"+method);\n        }\n\n        Method method;\n\n        method = person2Class.getMethod(\"setName\", String.class);    // 获取本类指定的一个（包括继承的）公共方法\n        System.out.println(\"getMethod：\"+method);\n\n        method = person2Class.getDeclaredMethod(\"test\");    // 获取本类指定的一个方法\n        System.out.println(\"getDeclaredMethod：\"+method);\n\n        // 构造器\n        System.out.println(\"========构造器========\");\n        Constructor[] constructors;\n\n        constructors = person2Class.getConstructors();  // 获取本类所有的公共构造器\n        for (Constructor constructor : constructors) {\n            System.out.println(\"getConstructors：\"+constructors);\n        }\n\n        constructors = person2Class.getDeclaredConstructors();  // 获取本类所有的构造器\n        for (Constructor constructor : constructors) {\n            System.out.println(\"getDeclaredConstructors：\"+constructors);\n        }\n\n        Constructor constructor;\n\n        constructor = person2Class.getConstructor(String.class,int.class);  // 获取本类指定的一个公共构造器\n        System.out.println(\"getConstructor：\"+constructor);\n\n        constructor = person2Class.getDeclaredConstructor(String.class);  // 获取本类指定的一个构造器\n        System.out.println(\"getDeclaredConstructor：\"+constructor);\n\n        /*\n        结果：\n        ========属性（字段）========\n        getFields：public java.lang.String com.example.reflection.Person2.alias\n        getDeclaredFields：private java.lang.String com.example.reflection.Person2.name\n        getDeclaredFields：public java.lang.String com.example.reflection.Person2.alias\n        getDeclaredFields：private int com.example.reflection.Person2.age\n        getField：public java.lang.String com.example.reflection.Person2.alias\n        getDeclaredField：private java.lang.String com.example.reflection.Person2.name\n        ========方法========\n        getMethods：public java.lang.String com.example.reflection.Person2.toString()\n        getMethods：public java.lang.String com.example.reflection.Person2.getName()\n        getMethods：public void com.example.reflection.Person2.setName(java.lang.String)\n        getMethods：public int com.example.reflection.Person2.getAge()\n        getMethods：public void com.example.reflection.Person2.setAge(int)\n        getMethods：public final void java.lang.Object.wait() throws java.lang.InterruptedException\n        getMethods：public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException\n        getMethods：public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException\n        getMethods：public boolean java.lang.Object.equals(java.lang.Object)\n        getMethods：public native int java.lang.Object.hashCode()\n        getMethods：public final native java.lang.Class java.lang.Object.getClass()\n        getMethods：public final native void java.lang.Object.notify()\n        getMethods：public final native void java.lang.Object.notifyAll()\n        getDeclaredMethods：public java.lang.String com.example.reflection.Person2.toString()\n        getDeclaredMethods：public java.lang.String com.example.reflection.Person2.getName()\n        getDeclaredMethods：public void com.example.reflection.Person2.setName(java.lang.String)\n        getDeclaredMethods：private void com.example.reflection.Person2.test()\n        getDeclaredMethods：public int com.example.reflection.Person2.getAge()\n        getDeclaredMethods：public void com.example.reflection.Person2.setAge(int)\n        getMethod：public void com.example.reflection.Person2.setName(java.lang.String)\n        getDeclaredMethod：private void com.example.reflection.Person2.test()\n        ========构造器========\n        getConstructors：[Ljava.lang.reflect.Constructor;@14ae5a5\n        getConstructors：[Ljava.lang.reflect.Constructor;@14ae5a5\n        getDeclaredConstructors：[Ljava.lang.reflect.Constructor;@7f31245a\n        getDeclaredConstructors：[Ljava.lang.reflect.Constructor;@7f31245a\n        getDeclaredConstructors：[Ljava.lang.reflect.Constructor;@7f31245a\n        getConstructor：public com.example.reflection.Person2(java.lang.String,int)\n        getDeclaredConstructor：private com.example.reflection.Person2(java.lang.String)\n         */\n\n    }\n\n}\n\nclass Person2 {\n\n    private String name;\n    public String alias;\n    private int age;\n\n    public Person2() {}\n\n    private Person2(String name) {\n        this.name = name;\n    }\n\n    public Person2(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    private void test() {\n        System.out.println(\"test\");\n    }\n\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n\n}\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 5. 动态的创建对象及操作\n\n- 通过反射动态创建对象有两种方法：\n  - 通过Class对象直接创建对象（本质上是调用无参构造器创建对象）\n  - 先通过Class对象获取构造器，再通过构造器创建对象\n- 反射操作方法：Class对象获取方法后，通过invoke(对象,参数值)调用方法\n- 反射操作属性：Class对象获取属性后，通过set(对象,参数值)方法给属性赋值\n\n```java\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\n// 通过反射动态的创建对象及操作对象（属性、方法）\npublic class ReflectionDemo04 {\n\n    public static void main(String[] args) throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException {\n\n        // 获取一个Class对象\n        Class person3Class = Person3.class;\n\n        /* ********创建对象******** */\n\n        // 通过Class对象直接创建对象\n        Person3 person1 = (Person3)person3Class.newInstance();  // 本质上是调用无参构造器创建对象\n        System.out.println(person1);\n\n        // 先通过Class对象获取构造器，再通过构造器创建对象\n        Constructor constructor = person3Class.getDeclaredConstructor(String.class, int.class);\n        Person3 person2 = (Person3)constructor.newInstance(\"小明\", 18);\n        System.out.println(person2);\n\n        /* ********操作方法******** */\n        // 获取方法\n        Method setName = person3Class.getDeclaredMethod(\"setName\", String.class);\n        // 通过invoke(对象,参数值)调用方法\n        setName.invoke(person1,\"张三\");\n        System.out.println(person1.getName());\n\n        /* ********操作属性（字段）******** */\n        // 获取属性（字段）\n        Field age = person3Class.getDeclaredField(\"age\");\n        // 若属性的访问权限有限制，还需要打开访问权限（关闭Java程序的安全检测）：setAccessible(true)\n        age.setAccessible(true);    // setAccessible还可以提高效率\n        // 通过set(对象,参数值)方法给属性赋值\n        age.set(person1,20);\n        System.out.println(person1.getAge());\n\n        /*\n        结果：\n        Person{name='null', age=0}\n        Person{name='小明', age=18}\n        张三\n        20\n         */\n\n    }\n\n}\n\nclass Person3 {\n\n    private String name;\n    public String alias;\n    private int age;\n\n    public Person3() {}\n\n    private Person3(String name) {\n        this.name = name;\n    }\n\n    public Person3(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    private void test() {\n        System.out.println(\"test\");\n    }\n\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n\n}\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 6. 反射获取泛型\n\n- 获取泛型：Class对象.getGenericParameterTypes()\n\n```java\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Map;\n\n// 通过反射获取泛型\npublic class ReflectionDemo05 {\n\n    // 参数值为泛型的方法\n    public void test01(Map<String,Integer> map, List<String> list) {\n        System.out.println(\"test01\");\n    }\n\n    // 返回值为泛型的方法\n    public List<String> test02() {\n        return null;\n    }\n\n    public static void main(String[] args) throws NoSuchMethodException {\n\n        // 获取一个Class对象\n        Class aClass = ReflectionDemo05.class;\n\n        /* ********获取参数值为泛型的方法的泛型信息******** */\n        // 获取方法\n        Method test01 = aClass.getMethod(\"test01\", Map.class, List.class);\n        // 获取泛型参数类型\n        Type[] genericParameterTypes = test01.getGenericParameterTypes();\n        for (Type genericParameterType : genericParameterTypes) {\n            System.out.println(genericParameterType);\n            if(genericParameterType instanceof ParameterizedType) {\n                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();\n                for (Type actualTypeArgument : actualTypeArguments) {\n                    System.out.println(actualTypeArgument);\n                }\n            }\n        }\n\n        /* ********获取返回值为泛型的方法的泛型信息******** */\n        // 获取方法\n        Method test02 = aClass.getMethod(\"test02\", null);\n        // 获取泛型参数类型\n        Type genericReturnType = test02.getGenericReturnType();\n        System.out.println(genericReturnType);\n        if(genericReturnType instanceof ParameterizedType) {\n            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();\n            for (Type actualTypeArgument : actualTypeArguments) {\n                System.out.println(actualTypeArgument);\n            }\n        }\n\n        /*\n        结果：\n        java.util.Map<java.lang.String, java.lang.Integer>\n        class java.lang.String\n        class java.lang.Integer\n        java.util.List<java.lang.String>\n        class java.lang.String\n        java.util.List<java.lang.String>\n        class java.lang.String\n         */\n\n    }\n\n}\n```\n\n&nbsp;\n\n---\n\n&nbsp;\n\n## 7. 反射获取注解\n\n- 获取注解：Class对象.getAnnotations()\n\n```java\nimport java.lang.annotation.*;\nimport java.lang.reflect.Field;\n\n// 通过反射获取注解\npublic class ReflectionDemo06 {\n\n    public static void main(String[] args) {\n\n        // 获取一个Class对象\n        Class studentClass = Student.class;\n\n        /* ********获取类的注解******** */\n        // 获取注解\n        Annotation[] annotations = studentClass.getAnnotations();\n        System.out.println(annotations);\n\n        // 获取注解的值\n        for (Annotation annotation : annotations) {\n            AnnoTable annoTable = (AnnoTable)annotation;\n            System.out.println(annoTable.value());\n        }\n\n        /* ********获取属性（字段）的注解******** */\n        // 获取字段\n        Field[] fields = studentClass.getDeclaredFields();\n\n        for (Field field : fields) {\n            // 获取注解\n            Annotation[] annotations1 = field.getAnnotations();\n            System.out.println(annotations1);\n\n            // 获取注解的值\n            for (Annotation annotation : annotations1) {\n                AnnoField annoField = (AnnoField)annotation;\n                System.out.println(annoField.columnName());\n                System.out.println(annoField.type());\n                System.out.println(annoField.length());\n            }\n        }\n\n        /*\n        结果：\n        [Ljava.lang.annotation.Annotation;@60e53b93\n        student\n        [Ljava.lang.annotation.Annotation;@6f94fa3e\n        id\n        int\n        8\n        [Ljava.lang.annotation.Annotation;@5e481248\n        name\n        varchar\n        8\n        [Ljava.lang.annotation.Annotation;@66d3c617\n        age\n        int\n        4\n         */\n\n    }\n\n}\n\n@AnnoTable(\"student\")\nclass Student {\n    @AnnoField(columnName = \"id\", type = \"int\", length = 8)\n    private int id;\n    @AnnoField(columnName = \"name\", type = \"varchar\", length = 8)\n    private String name;\n    @AnnoField(columnName = \"age\", type = \"int\", length = 4)\n    private int age;\n\n    public Student() {}\n\n    public Student(int id, String name, int age) {\n        this.id = id;\n        this.name = name;\n        this.age = age;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"Student{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n\n}\n\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@interface AnnoTable {\n    String value();\n}\n\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\n@interface AnnoField {\n    String columnName();\n    String type();\n    int length();\n}\n```\n\n","categoryId":"1","categoryName":"技术记录","tags":[{"id":"2","name":"Java"}],"views":1,"topping":false,"status":1,"createTime":"2022-10-24 20:51:59"}}