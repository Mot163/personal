{"code":0,"message":"获取文章简要信息成功!","data":{"id":"12","title":"Java中static的使用","description":"Java中static的使用","cover":"","content":"- static修饰变量为静态变量，静态变量可以直接“类名.静态变量名”访问。\n\n  ```java\n  public class Demo {\n      public static String str = \"Hello!\";\t// 静态变量\n  }\n  ```\n\n- static修饰方法为静态方法，静态方法可以直接“类名.静态方法()”调用。\n\n  ```java\n  public class Demo {\n      public static void sayHello() {\t// 静态变量\n  \t\tSystem.out.println(\"Hello!\");   \n      }\n  }\n  ```\n\n- static修饰内部类为静态内部类，静态内部类可以直接实例化。\n\n  ```java\n  // 外部类A\n  class A {\n  \n      private static String str = \"Hello\";\n  \n      private static void print() {\n          System.out.println(\"world\");\n      }\n  \n      // 静态内部类B\n      static class B {\n  \n          public String getStr() {\n              return str; // 访问外部类的静态私有变量\n          }\n  \n          public void printA() {\n              print(); // 调用外部类的静态私有方法\n          }\n  \n      }\n  \n  }\n  \n  public class Demo {\n  \n      public static void main(String[] args) {\n  \n          // 实例化\n          A.B b = new A.B();\n          System.out.println(b.getStr());\n          b.printA();\n  \n          System.out.println(\"结束\");\n  \n          /*\n           结果：\n           Hello\n           world\n           结束\n           */\n  \n      }\n  \n  }\n  ```\n\n- static后加“{ 代码块 }”放在类中为静态代码块，静态代码块在构造方法前调用，并且只执行一次。与之相似的还有个匿名代码块，匿名代码块直接是“{ 代码块 }”放在类中。匿名代码块在构造方法前调用，在静态代码块后调用，可以执行多次。\n\n  ```java\n  public class Demo {\n      \n      static {\t// 静态代码块\n          System.out.println(\"执行静态代码块\");\n      }\n      \n      {\t// 匿名代码块\n          System.out.println(\"执行匿名代码块\");\n      }\n      \n      public Demo() {\t// 构造方法\n  \t\tSystem.out.println(\"执行构造方法\");   \n      }\n      \n      public static void main(String[] args) {\n          \n          Demo demo1 = new Demo();\n          System.out.println(\"----------------\");\n          Demo demo2 = new Demo();\n          \n          System.out.println(\"结束\");\n          \n          /*\n           结果：\n           执行静态代码块\n           执行匿名代码块\n           执行构造方法\n           ----------------\n           执行匿名代码块\n           执行构造方法\n           结束\n           */\n          \n      }\n      \n  }\n  ```\n\n- static放在import后为静态导入包，可以让导入的方法或属性只写方法名或属性名调用\n\n  ```java\n  import static java.lang.Math.random;\t// 静态导入方法\n  import static java.lang.Math.PI;\t// 静态导入属性\n  \n  public class Demo {\n      \n      public static void main(String[] args) {\n          \n          System.out.println(random());\t// 输出0~1的随机数\n          System.out.println(PI);\t·// 输出圆周率的值\n          \n          System.out.println(\"结束\");\n          \n          /*\n           结果：\n  \t\t 0.8384238770843183（一个随机数）\n  \t\t 3.141592653589793\n           结束\n           */\n          \n      }\n      \n  }\n  ```\n\n- 在继承中，用static修饰的方法被重写后，对象调用的方法为当前类型对应的静态方法\n\n  ```java\n  class A {\n  \n      public static void print() {\t// 静态方法\n          System.out.println(\"HelloA\");\n      }\n  \n  }\n  \n  class B extends A {\n  \n      public static void print() {\t// 重写静态方法\n          System.out.println(\"HelloB\");\n      }\n      \n  }\n  \n  public class Demo {\n  \n      public static void main(String[] args) {\n  \n          B b = new B();\n          b.print();\n          \n          A a = (A)b;\n          a.print();\n  \n          System.out.println(\"结束\");\n  \n          /*\n           结果：\n           HelloB\n           HelloA\n           结束\n           */\n  \n      }\n  \n  }\n  ```","categoryId":"1","categoryName":"技术记录","tags":[{"id":"2","name":"Java"}],"views":2,"topping":false,"status":1,"createTime":"2022-10-24 20:52:43"}}